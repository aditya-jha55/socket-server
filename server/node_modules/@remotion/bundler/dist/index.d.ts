import esbuild = require('esbuild');
import webpack = require('webpack');
export declare const BundlerInternals: {
    esbuild: typeof esbuild;
    webpackConfig: ({ entry, userDefinedComponent, outDir, environment, webpackOverride, onProgress, enableCaching, envVariables, maxTimelineTracks, entryPoints, remotionRoot, keyboardShortcutsEnabled, poll, }: {
        entry: string;
        userDefinedComponent: string;
        outDir: string | null;
        environment: "development" | "production";
        webpackOverride: import("remotion").WebpackOverrideFn;
        onProgress?: ((f: number) => void) | undefined;
        enableCaching?: boolean | undefined;
        envVariables: Record<string, string>;
        maxTimelineTracks: number;
        keyboardShortcutsEnabled: boolean;
        entryPoints: string[];
        remotionRoot: string;
        poll: number | null;
    }) => [string, webpack.Configuration];
    indexHtml: ({ baseDir, editorName, inputProps, envVariables, staticHash, remotionRoot, previewServerCommand, numberOfAudioTags, publicFiles, includeFavicon, title, }: {
        staticHash: string;
        baseDir: string;
        editorName: string | null;
        inputProps: object | null;
        envVariables?: Record<string, string> | undefined;
        remotionRoot: string;
        previewServerCommand: string | null;
        numberOfAudioTags: number;
        publicFiles: import("remotion").StaticFile[];
        includeFavicon: boolean;
        title: string;
    }) => string;
    cacheExists: (remotionRoot: string, environment: "development" | "production", hash: string) => "exists" | "other-exists" | "does-not-exist";
    clearCache: (remotionRoot: string) => Promise<void>;
    getConfig: ({ entryPoint, outDir, resolvedRemotionRoot, onProgress, options, }: {
        outDir: string;
        entryPoint: string;
        resolvedRemotionRoot: string;
        onProgress?: ((progress: number) => void) | undefined;
        options?: import("./bundle").LegacyBundleOptions | undefined;
    }) => [string, webpack.Configuration];
    readRecursively: ({ folder, output, startPath, staticHash, limit, }: {
        folder: string;
        startPath: string;
        output?: import("remotion").StaticFile[] | undefined;
        staticHash: string;
        limit: number;
    }) => import("remotion").StaticFile[];
};
export { WebpackConfiguration, WebpackOverrideFn } from 'remotion';
export { bundle, BundleOptions, LegacyBundleOptions } from './bundle';
export { webpack };
