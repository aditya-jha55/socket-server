"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultAudioCodec = exports.defaultAudioCodecs = exports.mapAudioCodecToFfmpegAudioCodecName = exports.audioCodecNames = exports.supportedAudioCodecs = exports.validAudioCodecs = void 0;
exports.validAudioCodecs = ['pcm-16', 'aac', 'mp3', 'opus'];
exports.supportedAudioCodecs = {
    h264: ['aac', 'pcm-16'],
    'h264-mkv': ['pcm-16'],
    aac: ['aac', 'pcm-16'],
    gif: [],
    h265: ['aac', 'pcm-16'],
    mp3: ['mp3', 'pcm-16'],
    prores: ['aac', 'pcm-16'],
    vp8: ['opus', 'pcm-16'],
    vp9: ['opus', 'pcm-16'],
    wav: ['pcm-16'],
};
const _satisfies = exports.supportedAudioCodecs;
if (_satisfies) {
    // Just for type checking
}
exports.audioCodecNames = [
    'pcm_s16le',
    'aac',
    'libmp3lame',
    'libopus',
];
const mapAudioCodecToFfmpegAudioCodecName = (audioCodec) => {
    if (audioCodec === 'aac') {
        return 'aac';
    }
    if (audioCodec === 'mp3') {
        return 'libmp3lame';
    }
    if (audioCodec === 'opus') {
        return 'libopus';
    }
    if (audioCodec === 'pcm-16') {
        return 'pcm_s16le';
    }
    throw new Error('unknown audio codec: ' + audioCodec);
};
exports.mapAudioCodecToFfmpegAudioCodecName = mapAudioCodecToFfmpegAudioCodecName;
exports.defaultAudioCodecs = {
    'h264-mkv': {
        lossless: 'pcm-16',
        compressed: 'pcm-16',
    },
    aac: {
        lossless: 'pcm-16',
        compressed: 'aac',
    },
    gif: {
        lossless: null,
        compressed: null,
    },
    h264: {
        lossless: 'pcm-16',
        compressed: 'aac',
    },
    h265: {
        lossless: 'pcm-16',
        compressed: 'aac',
    },
    mp3: {
        lossless: 'pcm-16',
        compressed: 'mp3',
    },
    prores: {
        lossless: 'pcm-16',
        // V4.0: Make pcm the default
        compressed: 'aac',
    },
    vp8: {
        lossless: 'pcm-16',
        compressed: 'opus',
    },
    vp9: {
        lossless: 'pcm-16',
        compressed: 'opus',
    },
    wav: {
        lossless: 'pcm-16',
        compressed: 'pcm-16',
    },
};
const getDefaultAudioCodec = ({ codec, preferLossless, }) => {
    return exports.defaultAudioCodecs[codec][preferLossless ? 'lossless' : 'compressed'];
};
exports.getDefaultAudioCodec = getDefaultAudioCodec;
