"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateFfmpeg = exports.checkAndValidateFfmpegVersion = exports.binaryExists = exports.customExecutableExists = void 0;
const execa_1 = __importDefault(require("execa"));
const fs_1 = require("fs");
const os_1 = __importDefault(require("os"));
const ffmpeg_flags_1 = require("./ffmpeg-flags");
const warn_about_ffmpeg_version_1 = require("./warn-about-ffmpeg-version");
const existsMap = {};
const customExecutableExists = (localExecutable) => {
    try {
        (0, fs_1.statSync)(localExecutable);
        existsMap[localExecutable] = true;
    }
    catch (err) {
        existsMap[localExecutable] = false;
    }
    return existsMap[localExecutable];
};
exports.customExecutableExists = customExecutableExists;
const binaryExists = (name) => {
    if (typeof existsMap[name] !== 'undefined') {
        return existsMap[name];
    }
    const isWin = os_1.default.platform() === 'win32';
    const where = isWin ? 'where' : 'which';
    try {
        execa_1.default.sync(where, [name]);
        existsMap[name] = true;
        return true;
    }
    catch (err) {
        existsMap[name] = false;
        return false;
    }
};
exports.binaryExists = binaryExists;
const checkAndValidateFfmpegVersion = async (options) => {
    const ffmpegVersion = await (0, ffmpeg_flags_1.getFfmpegVersion)({
        ffmpegExecutable: options.ffmpegExecutable,
        remotionRoot: options.remotionRoot,
    });
    const buildConf = await (0, ffmpeg_flags_1.getFfmpegBuildInfo)({
        ffmpegExecutable: options.ffmpegExecutable,
        remotionRoot: options.remotionRoot,
    });
    (0, warn_about_ffmpeg_version_1.warnAboutFfmpegVersion)({ ffmpegVersion, buildConf });
};
exports.checkAndValidateFfmpegVersion = checkAndValidateFfmpegVersion;
const validateFfmpeg = async (customFfmpegBinary, remotionRoot, binary) => {
    const ffmpegExists = (0, exports.binaryExists)(binary);
    if (ffmpegExists) {
        return;
    }
    if (customFfmpegBinary) {
        if (!(0, exports.customExecutableExists)(customFfmpegBinary)) {
            throw new Error('Custom FFmpeg executable not found: ' + customFfmpegBinary);
        }
        return;
    }
    if (process.platform === 'linux' && (0, fs_1.existsSync)(ffmpeg_flags_1.lambdaFfmpegPaths[binary])) {
        return;
    }
    if ((0, ffmpeg_flags_1.ffmpegInNodeModules)(remotionRoot, binary)) {
        return;
    }
    const binaryUrl = (0, ffmpeg_flags_1.getBinaryDownloadUrl)(binary);
    if (binaryUrl) {
        await (0, ffmpeg_flags_1.downloadBinary)(remotionRoot, binaryUrl.url, binary);
        return (0, exports.validateFfmpeg)(customFfmpegBinary, remotionRoot, binary);
    }
    throw new Error(`${binary} could not be installed automatically. Your architecture and OS combination (os = ${os_1.default.platform()}, arch = ${process.arch}) is not supported. Please install ${binary} manually and add "${binary}" to your PATH.`);
};
exports.validateFfmpeg = validateFfmpeg;
