"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryToExtractFrameOfVideoFast = void 0;
const execa_1 = __importDefault(require("execa"));
const determine_resize_params_1 = require("./determine-resize-params");
const determine_vcodec_ffmpeg_flags_1 = require("./determine-vcodec-ffmpeg-flags");
const ffmpeg_flags_1 = require("./ffmpeg-flags");
const truthy_1 = require("./truthy");
const tryToExtractFrameOfVideoFast = async ({ ffmpegExecutable, remotionRoot, specialVCodecForTransparency, imageFormat, needsResize, src, actualOffset, }) => {
    const { stdout, stderr } = (0, execa_1.default)(await (0, ffmpeg_flags_1.getExecutableBinary)(ffmpegExecutable, remotionRoot, 'ffmpeg'), [
        '-ss',
        actualOffset,
        ...(0, determine_vcodec_ffmpeg_flags_1.determineVcodecFfmpegFlags)(specialVCodecForTransparency),
        '-i',
        src,
        '-frames:v',
        '1',
        '-c:v',
        imageFormat === 'jpeg' ? 'mjpeg' : 'png',
        '-f',
        'image2pipe',
        ...(0, determine_resize_params_1.determineResizeParams)(needsResize),
        '-',
    ].filter(truthy_1.truthy));
    if (!stderr) {
        throw new Error('unexpectedly did not get stderr');
    }
    if (!stdout) {
        throw new Error('unexpectedly did not get stdout');
    }
    const stderrChunks = [];
    const stdoutChunks = [];
    const stdErrString = new Promise((resolve, reject) => {
        stderr.on('data', (d) => stderrChunks.push(d));
        stderr.on('error', (err) => reject(err));
        stderr.on('end', () => resolve(Buffer.concat(stderrChunks).toString('utf-8')));
    });
    const stdoutChunk = new Promise((resolve, reject) => {
        stdout.on('data', (d) => {
            stdoutChunks.push(d);
        });
        stdout.on('error', (err) => {
            reject(err);
        });
        stdout.on('end', () => {
            resolve(Buffer.concat(stdoutChunks));
        });
    });
    const [stdErr, stdoutBuffer] = await Promise.all([stdErrString, stdoutChunk]);
    return [stdErr, stdoutBuffer];
};
exports.tryToExtractFrameOfVideoFast = tryToExtractFrameOfVideoFast;
