"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderInternals = exports.validateOutputFilename = exports.stitchFramesToVideo = exports.renderStill = exports.renderMedia = exports.renderFrames = exports.openBrowser = exports.makeCancelSignal = exports.validImageFormats = exports.validateSelectedPixelFormatAndImageFormatCombination = exports.getCompositions = exports.getCanExtractFramesFast = exports.ErrorWithStackFrame = exports.ensureFfprobe = exports.ensureFfmpeg = void 0;
const execa_1 = __importDefault(require("execa"));
const download_file_1 = require("./assets/download-file");
const download_map_1 = require("./assets/download-map");
const audio_codec_1 = require("./audio-codec");
const browser_1 = require("./browser");
const TimeoutSettings_1 = require("./browser/TimeoutSettings");
const can_use_parallel_encoding_1 = require("./can-use-parallel-encoding");
const check_apple_silicon_1 = require("./check-apple-silicon");
const codec_1 = require("./codec");
const combine_videos_1 = require("./combine-videos");
const convert_to_positive_frame_index_1 = require("./convert-to-positive-frame-index");
const delete_directory_1 = require("./delete-directory");
const ensure_output_directory_1 = require("./ensure-output-directory");
const symbolicate_error_1 = require("./error-handling/symbolicate-error");
const symbolicateable_error_1 = require("./error-handling/symbolicateable-error");
const ffmpeg_flags_1 = require("./ffmpeg-flags");
const file_extensions_1 = require("./file-extensions");
const find_closest_package_json_1 = require("./find-closest-package-json");
const frame_range_1 = require("./frame-range");
const get_concurrency_1 = require("./get-concurrency");
const get_duration_from_frame_range_1 = require("./get-duration-from-frame-range");
const get_extension_from_codec_1 = require("./get-extension-from-codec");
const get_extension_of_filename_1 = require("./get-extension-of-filename");
const get_frame_to_render_1 = require("./get-frame-to-render");
const get_local_browser_executable_1 = require("./get-local-browser-executable");
const get_port_1 = require("./get-port");
const image_format_1 = require("./image-format");
const is_audio_codec_1 = require("./is-audio-codec");
const is_serve_url_1 = require("./is-serve-url");
const log_level_1 = require("./log-level");
const mime_types_1 = require("./mime-types");
const open_browser_1 = require("./open-browser");
const parse_browser_error_stack_1 = require("./parse-browser-error-stack");
const perf = __importStar(require("./perf"));
const pixel_format_1 = require("./pixel-format");
const quality_1 = require("./quality");
const is_path_inside_1 = require("./serve-handler/is-path-inside");
const serve_static_1 = require("./serve-static");
const tmp_dir_1 = require("./tmp-dir");
const validate_concurrency_1 = require("./validate-concurrency");
const validate_even_dimensions_with_codec_1 = require("./validate-even-dimensions-with-codec");
const validate_ffmpeg_1 = require("./validate-ffmpeg");
const validate_opengl_renderer_1 = require("./validate-opengl-renderer");
const validate_puppeteer_timeout_1 = require("./validate-puppeteer-timeout");
const validate_videobitrate_1 = require("./validate-videobitrate");
const wait_for_symbolication_error_to_be_done_1 = require("./wait-for-symbolication-error-to-be-done");
var ensure_ffmpeg_1 = require("./ensure-ffmpeg");
Object.defineProperty(exports, "ensureFfmpeg", { enumerable: true, get: function () { return ensure_ffmpeg_1.ensureFfmpeg; } });
Object.defineProperty(exports, "ensureFfprobe", { enumerable: true, get: function () { return ensure_ffmpeg_1.ensureFfprobe; } });
var handle_javascript_exception_1 = require("./error-handling/handle-javascript-exception");
Object.defineProperty(exports, "ErrorWithStackFrame", { enumerable: true, get: function () { return handle_javascript_exception_1.ErrorWithStackFrame; } });
var get_can_extract_frames_fast_1 = require("./get-can-extract-frames-fast");
Object.defineProperty(exports, "getCanExtractFramesFast", { enumerable: true, get: function () { return get_can_extract_frames_fast_1.getCanExtractFramesFast; } });
var get_compositions_1 = require("./get-compositions");
Object.defineProperty(exports, "getCompositions", { enumerable: true, get: function () { return get_compositions_1.getCompositions; } });
var image_format_2 = require("./image-format");
Object.defineProperty(exports, "validateSelectedPixelFormatAndImageFormatCombination", { enumerable: true, get: function () { return image_format_2.validateSelectedPixelFormatAndImageFormatCombination; } });
Object.defineProperty(exports, "validImageFormats", { enumerable: true, get: function () { return image_format_2.validImageFormats; } });
var make_cancel_signal_1 = require("./make-cancel-signal");
Object.defineProperty(exports, "makeCancelSignal", { enumerable: true, get: function () { return make_cancel_signal_1.makeCancelSignal; } });
var open_browser_2 = require("./open-browser");
Object.defineProperty(exports, "openBrowser", { enumerable: true, get: function () { return open_browser_2.openBrowser; } });
var render_frames_1 = require("./render-frames");
Object.defineProperty(exports, "renderFrames", { enumerable: true, get: function () { return render_frames_1.renderFrames; } });
var render_media_1 = require("./render-media");
Object.defineProperty(exports, "renderMedia", { enumerable: true, get: function () { return render_media_1.renderMedia; } });
var render_still_1 = require("./render-still");
Object.defineProperty(exports, "renderStill", { enumerable: true, get: function () { return render_still_1.renderStill; } });
var stitch_frames_to_video_1 = require("./stitch-frames-to-video");
Object.defineProperty(exports, "stitchFramesToVideo", { enumerable: true, get: function () { return stitch_frames_to_video_1.stitchFramesToVideo; } });
var validate_output_filename_1 = require("./validate-output-filename");
Object.defineProperty(exports, "validateOutputFilename", { enumerable: true, get: function () { return validate_output_filename_1.validateOutputFilename; } });
exports.RenderInternals = {
    ensureLocalBrowser: get_local_browser_executable_1.ensureLocalBrowser,
    ffmpegHasFeature: ffmpeg_flags_1.ffmpegHasFeature,
    getActualConcurrency: get_concurrency_1.getActualConcurrency,
    validateFfmpeg: validate_ffmpeg_1.validateFfmpeg,
    serveStatic: serve_static_1.serveStatic,
    validateEvenDimensionsWithCodec: validate_even_dimensions_with_codec_1.validateEvenDimensionsWithCodec,
    getFileExtensionFromCodec: get_extension_from_codec_1.getFileExtensionFromCodec,
    tmpDir: tmp_dir_1.tmpDir,
    deleteDirectory: delete_directory_1.deleteDirectory,
    isServeUrl: is_serve_url_1.isServeUrl,
    ensureOutputDirectory: ensure_output_directory_1.ensureOutputDirectory,
    getRealFrameRange: get_frame_to_render_1.getRealFrameRange,
    validatePuppeteerTimeout: validate_puppeteer_timeout_1.validatePuppeteerTimeout,
    downloadFile: download_file_1.downloadFile,
    killAllBrowsers: open_browser_1.killAllBrowsers,
    parseStack: parse_browser_error_stack_1.parseStack,
    symbolicateError: symbolicate_error_1.symbolicateError,
    SymbolicateableError: symbolicateable_error_1.SymbolicateableError,
    getFramesToRender: get_duration_from_frame_range_1.getFramesToRender,
    getExtensionOfFilename: get_extension_of_filename_1.getExtensionOfFilename,
    getDesiredPort: get_port_1.getDesiredPort,
    isPathInside: is_path_inside_1.isPathInside,
    execa: execa_1.default,
    registerErrorSymbolicationLock: wait_for_symbolication_error_to_be_done_1.registerErrorSymbolicationLock,
    unlockErrorSymbolicationLock: wait_for_symbolication_error_to_be_done_1.unlockErrorSymbolicationLock,
    canUseParallelEncoding: can_use_parallel_encoding_1.canUseParallelEncoding,
    mimeContentType: mime_types_1.mimeContentType,
    mimeLookup: mime_types_1.mimeLookup,
    validateConcurrency: validate_concurrency_1.validateConcurrency,
    validPixelFormats: pixel_format_1.validPixelFormats,
    DEFAULT_BROWSER: browser_1.DEFAULT_BROWSER,
    validateFrameRange: frame_range_1.validateFrameRange,
    DEFAULT_OPENGL_RENDERER: validate_opengl_renderer_1.DEFAULT_OPENGL_RENDERER,
    validateOpenGlRenderer: validate_opengl_renderer_1.validateOpenGlRenderer,
    validImageFormats: image_format_1.validImageFormats,
    validCodecs: codec_1.validCodecs,
    DEFAULT_PIXEL_FORMAT: pixel_format_1.DEFAULT_PIXEL_FORMAT,
    validateQuality: quality_1.validateQuality,
    DEFAULT_TIMEOUT: TimeoutSettings_1.DEFAULT_TIMEOUT,
    DEFAULT_CODEC: codec_1.DEFAULT_CODEC,
    isAudioCodec: is_audio_codec_1.isAudioCodec,
    logLevels: log_level_1.logLevels,
    isEqualOrBelowLogLevel: log_level_1.isEqualOrBelowLogLevel,
    isValidLogLevel: log_level_1.isValidLogLevel,
    perf,
    makeDownloadMap: download_map_1.makeDownloadMap,
    cleanDownloadMap: download_map_1.cleanDownloadMap,
    convertToPositiveFrameIndex: convert_to_positive_frame_index_1.convertToPositiveFrameIndex,
    findRemotionRoot: find_closest_package_json_1.findRemotionRoot,
    getExecutableBinary: ffmpeg_flags_1.getExecutableBinary,
    validateBitrate: validate_videobitrate_1.validateBitrate,
    getFfmpegVersion: ffmpeg_flags_1.getFfmpegVersion,
    combineVideos: combine_videos_1.combineVideos,
    getDefaultAudioCodec: audio_codec_1.getDefaultAudioCodec,
    validAudioCodecs: audio_codec_1.validAudioCodecs,
    defaultFileExtensionMap: file_extensions_1.defaultFileExtensionMap,
    supportedAudioCodecs: file_extensions_1.supportedAudioCodecs,
    makeFileExtensionMap: get_extension_from_codec_1.makeFileExtensionMap,
    defaultCodecsForFileExtension: get_extension_from_codec_1.defaultCodecsForFileExtension,
};
// Warn of potential performance issues with Apple Silicon (M1 chip under Rosetta)
(0, check_apple_silicon_1.checkNodeVersionAndWarnAboutRosetta)();
