/// <reference types="node" />
import type { SmallTCompMetadata } from 'remotion';
import type { RenderMediaOnDownload } from './assets/download-and-map-assets-to-file';
import type { DownloadMap } from './assets/download-map';
import type { BrowserExecutable } from './browser-executable';
import type { BrowserLog } from './browser-log';
import type { Browser } from './browser/Browser';
import type { FfmpegExecutable } from './ffmpeg-executable';
import type { FrameRange } from './frame-range';
import type { ImageFormat } from './image-format';
import type { ServeUrlOrWebpackBundle } from './legacy-webpack-config';
import type { CancelSignal } from './make-cancel-signal';
import type { ChromiumOptions } from './open-browser';
import type { OnStartData, RenderFramesOutput } from './types';
declare type ConfigOrComposition = {
    /**
     * @deprecated This field has been renamed to `composition`
     */
    config: SmallTCompMetadata;
} | {
    composition: SmallTCompMetadata;
};
declare type ConcurrencyOrParallelism = {
    concurrency?: number | string | null;
} | {
    /**
     * @deprecated This field has been renamed to `concurrency`
     */
    parallelism?: number | null;
};
declare type RenderFramesOptions = {
    onStart: (data: OnStartData) => void;
    onFrameUpdate: (framesRendered: number, frameIndex: number, timeToRenderInMilliseconds: number) => void;
    outputDir: string | null;
    inputProps: unknown;
    envVariables?: Record<string, string>;
    imageFormat: ImageFormat;
    quality?: number;
    frameRange?: FrameRange | null;
    everyNthFrame?: number;
    dumpBrowserLogs?: boolean;
    puppeteerInstance?: Browser;
    browserExecutable?: BrowserExecutable;
    onBrowserLog?: (log: BrowserLog) => void;
    onFrameBuffer?: (buffer: Buffer, frame: number) => void;
    onDownload?: RenderMediaOnDownload;
    timeoutInMilliseconds?: number;
    chromiumOptions?: ChromiumOptions;
    scale?: number;
    ffmpegExecutable?: FfmpegExecutable;
    ffprobeExecutable?: FfmpegExecutable;
    port?: number | null;
    cancelSignal?: CancelSignal;
    /**
     * @deprecated Only for Remotion internal usage
     */
    downloadMap?: DownloadMap;
    muted?: boolean;
} & ConfigOrComposition & ConcurrencyOrParallelism & ServeUrlOrWebpackBundle;
/**
 * @description Renders a series of images using Puppeteer and computes information for mixing audio.
 * @see [Documentation](https://www.remotion.dev/docs/renderer/render-frames)
 */
export declare const renderFrames: (options: RenderFramesOptions) => Promise<RenderFramesOutput>;
export {};
