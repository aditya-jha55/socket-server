import type { FfmpegExecutable } from './ffmpeg-executable';
export declare type FfmpegVersion = [number, number, number] | null;
export declare const getFfmpegBuildInfo: (options: {
    ffmpegExecutable: string | null;
    remotionRoot: string;
}) => Promise<string>;
export declare const ffmpegInNodeModules: (remotionRoot: string, binary: 'ffmpeg' | 'ffprobe') => string | null;
export declare const ffmpegHasFeature: ({ ffmpegExecutable, feature, remotionRoot, }: {
    ffmpegExecutable: string | null;
    feature: 'enable-gpl' | 'enable-libx265' | 'enable-libvpx';
    remotionRoot: string;
}) => Promise<boolean>;
export declare const parseFfmpegVersion: (buildconf: string) => FfmpegVersion;
export declare const getFfmpegVersion: (options: {
    ffmpegExecutable: string | null;
    remotionRoot: string;
}) => Promise<FfmpegVersion>;
export declare const downloadBinary: (remotionRoot: string, url: string, binary: 'ffmpeg' | 'ffprobe') => Promise<string>;
export declare const lambdaFfmpegPaths: {
    readonly ffmpeg: "/opt/bin/ffmpeg";
    readonly ffprobe: "/opt/bin/ffprobe";
};
export declare const getExecutableBinary: (ffmpegExecutable: FfmpegExecutable, remotionRoot: string, binary: 'ffmpeg' | 'ffprobe') => string | Promise<string>;
export declare const getBinaryDownloadUrl: (binary: 'ffmpeg' | 'ffprobe') => {
    url: string;
    contentLength: number;
} | null;
export declare const warnAboutFfmpegVersion: ({ ffmpegVersion, buildConf, }: {
    ffmpegVersion: FfmpegVersion;
    buildConf: string | null;
}) => null | undefined;
