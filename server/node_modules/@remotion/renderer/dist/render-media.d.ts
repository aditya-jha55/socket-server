import type { SmallTCompMetadata } from 'remotion';
import type { RenderMediaOnDownload } from './assets/download-and-map-assets-to-file';
import type { DownloadMap } from './assets/download-map';
import type { AudioCodec } from './audio-codec';
import type { BrowserExecutable } from './browser-executable';
import type { BrowserLog } from './browser-log';
import type { Browser as PuppeteerBrowser } from './browser/Browser';
import type { Codec } from './codec';
import type { FfmpegExecutable } from './ffmpeg-executable';
import type { FfmpegOverrideFn } from './ffmpeg-override';
import type { FrameRange } from './frame-range';
import type { ServeUrlOrWebpackBundle } from './legacy-webpack-config';
import type { CancelSignal } from './make-cancel-signal';
import type { ChromiumOptions } from './open-browser';
import type { PixelFormat } from './pixel-format';
import type { ProResProfile } from './prores-profile';
import type { OnStartData } from './types';
export declare type StitchingState = 'encoding' | 'muxing';
export declare type SlowFrame = {
    frame: number;
    time: number;
};
export declare type OnSlowestFrames = (frames: SlowFrame[]) => void;
export declare type RenderMediaOnProgress = (progress: {
    renderedFrames: number;
    encodedFrames: number;
    encodedDoneIn: number | null;
    renderedDoneIn: number | null;
    progress: number;
    stitchStage: StitchingState;
}) => void;
export declare type RenderMediaOptions = {
    outputLocation?: string | null;
    codec: Codec;
    composition: SmallTCompMetadata;
    inputProps?: unknown;
    crf?: number | null;
    imageFormat?: 'png' | 'jpeg' | 'none';
    ffmpegExecutable?: FfmpegExecutable;
    ffprobeExecutable?: FfmpegExecutable;
    pixelFormat?: PixelFormat;
    envVariables?: Record<string, string>;
    quality?: number;
    frameRange?: FrameRange | null;
    everyNthFrame?: number;
    numberOfGifLoops?: number | null;
    puppeteerInstance?: PuppeteerBrowser;
    overwrite?: boolean;
    onProgress?: RenderMediaOnProgress;
    onDownload?: RenderMediaOnDownload;
    proResProfile?: ProResProfile;
    dumpBrowserLogs?: boolean;
    onBrowserLog?: ((log: BrowserLog) => void) | undefined;
    onStart?: (data: OnStartData) => void;
    timeoutInMilliseconds?: number;
    chromiumOptions?: ChromiumOptions;
    scale?: number;
    port?: number | null;
    cancelSignal?: CancelSignal;
    browserExecutable?: BrowserExecutable;
    verbose?: boolean;
    internal?: {
        /**
         * @deprecated Only for Remotion internal usage
         */
        downloadMap?: DownloadMap;
        /**
         * @deprecated Only for Remotion internal usage
         */
        onCtrlCExit?: (fn: () => void) => void;
    };
    preferLossless?: boolean;
    muted?: boolean;
    enforceAudioTrack?: boolean;
    ffmpegOverride?: FfmpegOverrideFn;
    audioBitrate?: string | null;
    videoBitrate?: string | null;
    onSlowestFrames?: OnSlowestFrames;
    disallowParallelEncoding?: boolean;
    audioCodec?: AudioCodec | null;
} & ServeUrlOrWebpackBundle & ConcurrencyOrParallelism;
declare type ConcurrencyOrParallelism = {
    concurrency?: number | string | null;
} | {
    /**
     * @deprecated This field has been renamed to `concurrency`
     */
    parallelism?: number | null;
};
/**
 *
 * @description Render a video from a composition
 * @see [Documentation](https://www.remotion.dev/docs/renderer/render-media)
 */
export declare const renderMedia: ({ proResProfile, crf, composition, ffmpegExecutable, ffprobeExecutable, inputProps, pixelFormat, codec, envVariables, frameRange, puppeteerInstance, outputLocation, onProgress, overwrite, onDownload, dumpBrowserLogs, onBrowserLog, onStart, timeoutInMilliseconds, chromiumOptions, scale, browserExecutable, port, cancelSignal, muted, enforceAudioTrack, ffmpegOverride, audioBitrate, videoBitrate, onSlowestFrames, audioCodec, ...options }: RenderMediaOptions) => Promise<Buffer | null>;
export {};
