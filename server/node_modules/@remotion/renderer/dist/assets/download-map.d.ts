/// <reference types="node" />
import type { TAsset } from 'remotion';
declare type EncodingStatus = {
    type: 'encoding';
} | {
    type: 'done';
    src: string;
} | undefined;
export declare type SpecialVCodecForTransparency = 'vp9' | 'vp8' | 'none';
export declare type NeedsResize = [number, number] | null;
export declare type Vp9Result = {
    specialVcodecForTransparency: SpecialVCodecForTransparency;
    needsResize: NeedsResize;
};
export declare type VideoDurationResult = {
    duration: number | null;
    fps: number | null;
};
export declare type AudioChannelsAndDurationResultCache = {
    channels: number;
    duration: number | null;
};
export declare type DownloadMap = {
    id: string;
    isDownloadingMap: {
        [src: string]: {
            [downloadDir: string]: boolean;
        } | undefined;
    };
    hasBeenDownloadedMap: {
        [src: string]: {
            [downloadDir: string]: string | null;
        } | undefined;
    };
    listeners: {
        [key: string]: {
            [downloadDir: string]: (() => void)[];
        };
    };
    lastFrameMap: Record<string, {
        lastAccessed: number;
        data: Buffer;
    }>;
    isBeyondLastFrameMap: Record<string, number>;
    isVp9VideoCache: Record<string, Vp9Result>;
    ensureFileHasPresentationTimestamp: Record<string, EncodingStatus>;
    videoDurationResultCache: Record<string, VideoDurationResult>;
    durationOfAssetCache: Record<string, AudioChannelsAndDurationResultCache>;
    downloadDir: string;
    preEncode: string;
    audioMixing: string;
    complexFilter: string;
    audioPreprocessing: string;
    stitchFrames: string;
    assetDir: string;
    compositingDir: string;
    compositorCache: {
        [key: string]: string;
    };
};
export declare type RenderAssetInfo = {
    assets: TAsset[][];
    imageSequenceName: string;
    firstFrameIndex: number;
    downloadMap: DownloadMap;
};
export declare const makeDownloadMap: () => DownloadMap;
export declare const cleanDownloadMap: (downloadMap: DownloadMap) => void;
export {};
