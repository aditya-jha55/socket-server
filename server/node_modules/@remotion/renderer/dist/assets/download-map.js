"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanDownloadMap = exports.makeDownloadMap = void 0;
const fs_1 = __importStar(require("fs"));
const path_1 = __importDefault(require("path"));
const delete_directory_1 = require("../delete-directory");
const tmp_dir_1 = require("../tmp-dir");
const makeAndReturn = (dir, name) => {
    const p = path_1.default.join(dir, name);
    (0, fs_1.mkdirSync)(p);
    return p;
};
const packageJsonPath = path_1.default.join(__dirname, '..', '..', 'package.json');
const packageJson = fs_1.default.existsSync(packageJsonPath)
    ? JSON.parse(fs_1.default.readFileSync(packageJsonPath, 'utf-8'))
    : null;
const makeDownloadMap = () => {
    const dir = (0, tmp_dir_1.tmpDir)(packageJson
        ? `remotion-v${packageJson.version.replace(/\./g, '-')}-assets`
        : 'remotion-assets');
    return {
        isDownloadingMap: {},
        hasBeenDownloadedMap: {},
        listeners: {},
        lastFrameMap: {},
        isBeyondLastFrameMap: {},
        ensureFileHasPresentationTimestamp: {},
        isVp9VideoCache: {},
        videoDurationResultCache: {},
        durationOfAssetCache: {},
        id: String(Math.random()),
        assetDir: dir,
        downloadDir: makeAndReturn(dir, 'remotion-assets-dir'),
        complexFilter: makeAndReturn(dir, 'remotion-complex-filter'),
        preEncode: makeAndReturn(dir, 'pre-encode'),
        audioMixing: makeAndReturn(dir, 'remotion-audio-mixing'),
        audioPreprocessing: makeAndReturn(dir, 'remotion-audio-preprocessing'),
        stitchFrames: makeAndReturn(dir, 'remotion-stitch-temp-dir'),
        compositingDir: makeAndReturn(dir, 'remotion-compositing-temp-dir'),
        compositorCache: {},
    };
};
exports.makeDownloadMap = makeDownloadMap;
const cleanDownloadMap = (downloadMap) => {
    (0, delete_directory_1.deleteDirectory)(downloadMap.downloadDir);
    (0, delete_directory_1.deleteDirectory)(downloadMap.complexFilter);
    (0, delete_directory_1.deleteDirectory)(downloadMap.compositingDir);
    // Assets dir must be last since the others are contained
    (0, delete_directory_1.deleteDirectory)(downloadMap.assetDir);
};
exports.cleanDownloadMap = cleanDownloadMap;
