"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChromeLauncher = void 0;
/**
 * Copyright 2017 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const fs_1 = __importDefault(require("fs"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const assert_1 = require("./assert");
const Browser_1 = require("./Browser");
const BrowserFetcher_1 = require("./BrowserFetcher");
const BrowserRunner_1 = require("./BrowserRunner");
const tmpDir = () => {
    return process.env.PUPPETEER_TMP_DIR || os.tmpdir();
};
class ChromeLauncher {
    constructor(preferredRevision) {
        this._preferredRevision = preferredRevision;
    }
    async launch(options) {
        const { args = [], dumpio = false, executablePath, pipe = false, env = process.env, defaultViewport, timeout = 60000, debuggingPort, } = options;
        const chromeArguments = args;
        if (!chromeArguments.some((argument) => {
            return argument.startsWith('--remote-debugging-');
        })) {
            if (pipe) {
                (0, assert_1.assert)(!debuggingPort, 'Browser should be launched with either pipe or debugging port - not both.');
                chromeArguments.push('--remote-debugging-pipe');
            }
            else {
                chromeArguments.push(`--remote-debugging-port=${debuggingPort || 0}`);
            }
        }
        // Check for the user data dir argument, which will always be set even
        // with a custom directory specified via the userDataDir option.
        const userDataDir = await fs_1.default.promises.mkdtemp(path.join(tmpDir(), 'puppeteer_dev_chrome_profile-'));
        chromeArguments.push(`--user-data-dir=${userDataDir}`);
        let chromeExecutable = executablePath;
        if (!chromeExecutable) {
            const { missingText, executablePath: exPath } = resolveExecutablePath(this);
            if (missingText) {
                throw new Error(missingText);
            }
            chromeExecutable = exPath;
        }
        const runner = new BrowserRunner_1.BrowserRunner({
            executablePath: chromeExecutable,
            processArguments: chromeArguments,
            userDataDir,
        });
        runner.start({
            dumpio,
            env,
            pipe: false,
        });
        let browser;
        try {
            const connection = await runner.setupConnection({
                timeout,
                preferredRevision: this._preferredRevision,
            });
            browser = await Browser_1.Browser._create({
                connection,
                contextIds: [],
                defaultViewport,
                closeCallback: runner.close.bind(runner),
            });
        }
        catch (error) {
            runner.kill();
            throw error;
        }
        try {
            await browser.waitForTarget((t) => {
                return t.type() === 'page';
            }, { timeout });
        }
        catch (error) {
            await browser.close(false);
            throw error;
        }
        return browser;
    }
    executablePath() {
        const results = resolveExecutablePath(this);
        return results.executablePath;
    }
    get product() {
        return 'chrome';
    }
}
exports.ChromeLauncher = ChromeLauncher;
function resolveExecutablePath(launcher) {
    const { product, _preferredRevision } = launcher;
    const browserFetcher = new BrowserFetcher_1.BrowserFetcher({
        product,
        path: null,
        platform: null,
    });
    const revisionInfo = browserFetcher.revisionInfo(_preferredRevision);
    const firefoxHelp = `Run \`PUPPETEER_PRODUCT=firefox npm install\` to download a supported Firefox browser binary.`;
    const chromeHelp = `Run \`npm install\` to download the correct Chromium revision (${launcher._preferredRevision}).`;
    const missingText = revisionInfo.local
        ? undefined
        : `Could not find expected browser (${product}) locally. ${product === 'chrome' ? chromeHelp : firefoxHelp}`;
    return { executablePath: revisionInfo.executablePath, missingText };
}
