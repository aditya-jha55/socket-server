"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.screenshotTask = void 0;
const fs_1 = __importDefault(require("fs"));
const perf_1 = require("./perf");
const screenshotTask = async ({ format, height, omitBackground, page, width, path, quality, clipRegion, }) => {
    var _a;
    const client = page._client();
    const target = page.target();
    const perfTarget = (0, perf_1.startPerfMeasure)('activate-target');
    await client.send('Target.activateTarget', {
        targetId: target._targetId,
    });
    (0, perf_1.stopPerfMeasure)(perfTarget);
    const shouldSetDefaultBackground = omitBackground && format === 'png';
    if (shouldSetDefaultBackground)
        await client.send('Emulation.setDefaultBackgroundColorOverride', {
            color: { r: 0, g: 0, b: 0, a: 0 },
        });
    const cap = (0, perf_1.startPerfMeasure)('capture');
    try {
        const result = await client.send('Page.captureScreenshot', {
            format,
            quality,
            clip: clipRegion !== null && clipRegion !== 'hide'
                ? {
                    x: clipRegion.x,
                    y: clipRegion.y,
                    height: clipRegion.height,
                    scale: 1,
                    width: clipRegion.width,
                }
                : {
                    x: 0,
                    y: 0,
                    height,
                    scale: 1,
                    width,
                },
            captureBeyondViewport: true,
            optimizeForSpeed: true,
        });
        (0, perf_1.stopPerfMeasure)(cap);
        if (shouldSetDefaultBackground)
            await client.send('Emulation.setDefaultBackgroundColorOverride');
        const saveMarker = (0, perf_1.startPerfMeasure)('save');
        const buffer = Buffer.from(result.data, 'base64');
        if (path)
            await fs_1.default.promises.writeFile(path, buffer);
        (0, perf_1.stopPerfMeasure)(saveMarker);
        return buffer;
    }
    catch (err) {
        if (err.message.includes('Unable to capture screenshot')) {
            const errMessage = [
                'Could not take a screenshot because Google Chrome ran out of memory or disk space.',
                ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.__RESERVED_IS_INSIDE_REMOTION_LAMBDA)
                    ? 'Deploy a new Lambda function with more memory or disk space.'
                    : 'Decrease the concurrency to use less RAM.',
            ].join(' ');
            throw new Error(errMessage);
        }
        throw err;
    }
};
exports.screenshotTask = screenshotTask;
