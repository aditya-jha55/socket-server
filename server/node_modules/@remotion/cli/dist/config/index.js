"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.overrideRemotion = exports.ConfigInternals = exports.Config = void 0;
const remotion_1 = require("remotion");
const browser_1 = require("./browser");
const browser_executable_1 = require("./browser-executable");
const chromium_flags_1 = require("./chromium-flags");
const codec_1 = require("./codec");
const concurrency_1 = require("./concurrency");
const env_file_1 = require("./env-file");
const ffmpeg_executable_1 = require("./ffmpeg-executable");
const frame_range_1 = require("./frame-range");
const image_format_1 = require("./image-format");
const image_sequence_1 = require("./image-sequence");
const Logging = __importStar(require("./log"));
const max_timeline_tracks_1 = require("./max-timeline-tracks");
const output_location_1 = require("./output-location");
const override_webpack_1 = require("./override-webpack");
const overwrite_1 = require("./overwrite");
const pixel_format_1 = require("./pixel-format");
const preview_server_1 = require("./preview-server");
const prores_profile_1 = require("./prores-profile");
const quality_1 = require("./quality");
const scale_1 = require("./scale");
const still_frame_1 = require("./still-frame");
const timeout_1 = require("./timeout");
const webpack_caching_1 = require("./webpack-caching");
const audio_codec_1 = require("./audio-codec");
const bitrate_1 = require("./bitrate");
const browser_executable_2 = require("./browser-executable");
const chromium_flags_2 = require("./chromium-flags");
const codec_2 = require("./codec");
const concurrency_2 = require("./concurrency");
const crf_1 = require("./crf");
const enforce_audio_track_1 = require("./enforce-audio-track");
const entry_point_1 = require("./entry-point");
const env_file_2 = require("./env-file");
const every_nth_frame_1 = require("./every-nth-frame");
const ffmpeg_executable_2 = require("./ffmpeg-executable");
const ffmpeg_override_1 = require("./ffmpeg-override");
const frame_range_2 = require("./frame-range");
const height_1 = require("./height");
const image_format_2 = require("./image-format");
const image_sequence_2 = require("./image-sequence");
const keyboard_shortcuts_1 = require("./keyboard-shortcuts");
const log_1 = require("./log");
const max_timeline_tracks_2 = require("./max-timeline-tracks");
const muted_1 = require("./muted");
const number_of_gif_loops_1 = require("./number-of-gif-loops");
const number_of_shared_audio_tags_1 = require("./number-of-shared-audio-tags");
const open_browser_1 = require("./open-browser");
const output_location_2 = require("./output-location");
const override_webpack_2 = require("./override-webpack");
const overwrite_2 = require("./overwrite");
const pixel_format_2 = require("./pixel-format");
const preview_server_2 = require("./preview-server");
const prores_profile_2 = require("./prores-profile");
const public_dir_1 = require("./public-dir");
const quality_2 = require("./quality");
const scale_2 = require("./scale");
const timeout_2 = require("./timeout");
const webpack_caching_2 = require("./webpack-caching");
const webpack_poll_1 = require("./webpack-poll");
const width_1 = require("./width");
const Preview = {
    setMaxTimelineTracks: max_timeline_tracks_2.setMaxTimelineTracks,
    setKeyboardShortcutsEnabled: keyboard_shortcuts_1.setKeyboardShortcutsEnabled,
    setNumberOfSharedAudioTags: number_of_shared_audio_tags_1.setNumberOfSharedAudioTags,
    setWebpackPollingInMilliseconds: webpack_poll_1.setWebpackPollingInMilliseconds,
    setShouldOpenBrowser: open_browser_1.setShouldOpenBrowser,
};
const Bundling = {
    overrideWebpackConfig: override_webpack_2.overrideWebpackConfig,
    setCachingEnabled: webpack_caching_2.setWebpackCaching,
    setPort: preview_server_2.setPort,
    setPublicDir: public_dir_1.setPublicDir,
    setEntryPoint: entry_point_1.setEntryPoint,
};
const Log = {
    setLevel: log_1.setLogLevel,
};
const Puppeteer = {
    setBrowserExecutable: browser_executable_2.setBrowserExecutable,
    setTimeoutInMilliseconds: timeout_2.setPuppeteerTimeout,
    setDelayRenderTimeoutInMilliseconds: timeout_2.setPuppeteerTimeout,
    setChromiumDisableWebSecurity: chromium_flags_2.setChromiumDisableWebSecurity,
    setChromiumIgnoreCertificateErrors: chromium_flags_2.setChromiumIgnoreCertificateErrors,
    setChromiumHeadlessMode: chromium_flags_2.setChromiumHeadlessMode,
    setChromiumOpenGlRenderer: chromium_flags_2.setChromiumOpenGlRenderer,
};
const Rendering = {
    setDotEnvLocation: env_file_2.setDotEnvLocation,
    setConcurrency: concurrency_2.setConcurrency,
    setQuality: quality_2.setQuality,
    setImageFormat: image_format_2.setImageFormat,
    setFrameRange: frame_range_2.setFrameRange,
    setFfmpegExecutable: ffmpeg_executable_2.setFfmpegExecutable,
    setFfprobeExecutable: ffmpeg_executable_2.setFfprobeExecutable,
    setScale: scale_2.setScale,
    setEveryNthFrame: every_nth_frame_1.setEveryNthFrame,
    setNumberOfGifLoops: number_of_gif_loops_1.setNumberOfGifLoops,
    setMuted: muted_1.setMuted,
    setEnforceAudioTrack: enforce_audio_track_1.setEnforceAudioTrack,
};
const Output = {
    setOutputLocation: output_location_2.setOutputLocation,
    setOverwriteOutput: overwrite_2.setOverwriteOutput,
    setPixelFormat: pixel_format_2.setPixelFormat,
    setOutputFormat: codec_2.setOutputFormat,
    setCodec: codec_2.setCodec,
    setCrf: crf_1.setCrf,
    setImageSequence: image_sequence_2.setImageSequence,
    setProResProfile: prores_profile_2.setProResProfile,
    setAudioBitrate: bitrate_1.setAudioBitrate,
    setVideoBitrate: bitrate_1.setVideoBitrate,
    overrideHeight: height_1.overrideHeight,
    overrideWidth: width_1.overrideWidth,
    overrideFfmpegCommand: ffmpeg_override_1.setFfmpegOverrideFunction,
};
exports.Config = {
    // New flat config format
    ...Preview,
    ...Bundling,
    ...Log,
    ...Puppeteer,
    ...Rendering,
    ...Output,
    // Legacy config format
    Preview,
    Bundling,
    Log,
    Puppeteer,
    Rendering,
    Output,
    // Options added after migration
    setAudioCodec: audio_codec_1.setAudioCodec,
};
exports.ConfigInternals = {
    getRange: frame_range_1.getRange,
    getOutputCodecOrUndefined: codec_1.getOutputCodecOrUndefined,
    getCustomFfmpegExecutable: ffmpeg_executable_1.getCustomFfmpegExecutable,
    getBrowser: browser_1.getBrowser,
    getPixelFormat: pixel_format_1.getPixelFormat,
    getProResProfile: prores_profile_1.getProResProfile,
    getShouldOverwrite: overwrite_1.getShouldOverwrite,
    getBrowserExecutable: browser_executable_1.getBrowserExecutable,
    getCustomFfprobeExecutable: ffmpeg_executable_1.getCustomFfprobeExecutable,
    getScale: scale_1.getScale,
    getServerPort: preview_server_1.getServerPort,
    getChromiumDisableWebSecurity: chromium_flags_1.getChromiumDisableWebSecurity,
    getIgnoreCertificateErrors: chromium_flags_1.getIgnoreCertificateErrors,
    getChromiumHeadlessMode: chromium_flags_1.getChromiumHeadlessMode,
    getChromiumOpenGlRenderer: chromium_flags_1.getChromiumOpenGlRenderer,
    getEveryNthFrame: every_nth_frame_1.getEveryNthFrame,
    getConcurrency: concurrency_1.getConcurrency,
    getCurrentPuppeteerTimeout: timeout_1.getCurrentPuppeteerTimeout,
    getQuality: quality_1.getQuality,
    getAudioCodec: audio_codec_1.getAudioCodec,
    getStillFrame: still_frame_1.getStillFrame,
    getShouldOutputImageSequence: image_sequence_1.getShouldOutputImageSequence,
    getDotEnvLocation: env_file_1.getDotEnvLocation,
    getUserPreferredImageFormat: image_format_1.getUserPreferredImageFormat,
    getWebpackOverrideFn: override_webpack_1.getWebpackOverrideFn,
    getWebpackCaching: webpack_caching_1.getWebpackCaching,
    getOutputLocation: output_location_1.getOutputLocation,
    Logging,
    setFrameRangeFromCli: frame_range_1.setFrameRangeFromCli,
    setStillFrame: still_frame_1.setStillFrame,
    getMaxTimelineTracks: max_timeline_tracks_1.getMaxTimelineTracks,
    defaultOverrideFunction: override_webpack_1.defaultOverrideFunction,
    setMuted: muted_1.setMuted,
    getMuted: muted_1.getMuted,
    getEnforceAudioTrack: enforce_audio_track_1.getEnforceAudioTrack,
    setEnforceAudioTrack: enforce_audio_track_1.setEnforceAudioTrack,
    getKeyboardShortcutsEnabled: keyboard_shortcuts_1.getKeyboardShortcutsEnabled,
    getPublicDir: public_dir_1.getPublicDir,
    getFfmpegOverrideFunction: ffmpeg_override_1.getFfmpegOverrideFunction,
    getAudioBitrate: bitrate_1.getAudioBitrate,
    getVideoBitrate: bitrate_1.getVideoBitrate,
    getHeight: height_1.getHeight,
    getWidth: width_1.getWidth,
    getCrfOrUndefined: crf_1.getCrfOrUndefined,
    getEntryPoint: entry_point_1.getEntryPoint,
    getNumberOfGifLoops: number_of_gif_loops_1.getNumberOfGifLoops,
    getWebpackPolling: webpack_poll_1.getWebpackPolling,
    getShouldOpenBrowser: open_browser_1.getShouldOpenBrowser,
};
const overrideRemotion = () => {
    Object.assign(remotion_1.Config, exports.Config);
    remotion_1.Internals.enableLegacyRemotionConfig();
};
exports.overrideRemotion = overrideRemotion;
