"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnvironmentVariables = void 0;
const renderer_1 = require("@remotion/renderer");
const dotenv_1 = __importDefault(require("dotenv"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const chalk_1 = require("./chalk");
const config_1 = require("./config");
const log_1 = require("./log");
const parse_command_line_1 = require("./parse-command-line");
function getProcessEnv() {
    const env = {};
    const validKeys = Object.keys(process.env).filter((key) => key.startsWith('REMOTION_'));
    for (const key of validKeys) {
        env[key] = process.env[key];
    }
    return env;
}
const watchEnvFile = ({ processEnv, envFile, onUpdate, existedBefore, }) => {
    const listener = async () => {
        try {
            const file = await fs_1.default.promises.readFile(envFile, 'utf-8');
            onUpdate({
                ...processEnv,
                ...dotenv_1.default.parse(file),
            });
            if (existedBefore) {
                log_1.Log.info(chalk_1.chalk.blueBright(`Updated env file ${envFile}`));
            }
            else {
                log_1.Log.info(chalk_1.chalk.blueBright(`Added env file ${envFile}`));
            }
            fs_1.default.unwatchFile(envFile, listener);
            watchEnvFile({
                envFile,
                existedBefore: true,
                onUpdate,
                processEnv,
            });
        }
        catch (err) {
            // No error message if user did not have a .env file from the beginning
            if (!existedBefore && !fs_1.default.existsSync(envFile)) {
                return;
            }
            if (fs_1.default.existsSync(envFile) && existedBefore) {
                log_1.Log.error(`${envFile} update failed with error ${err}`);
            }
            else {
                log_1.Log.warn(`${envFile} was deleted.`);
                fs_1.default.unwatchFile(envFile, listener);
                watchEnvFile({
                    envFile,
                    existedBefore: false,
                    onUpdate,
                    processEnv,
                });
            }
        }
    };
    fs_1.default.watchFile(envFile, { interval: 100 }, listener);
};
const getEnvForEnvFile = async (processEnv, envFile, onUpdate) => {
    try {
        const envFileData = await fs_1.default.promises.readFile(envFile);
        watchEnvFile({ processEnv, envFile, onUpdate, existedBefore: true });
        return {
            ...processEnv,
            ...dotenv_1.default.parse(envFileData),
        };
    }
    catch (err) {
        log_1.Log.error(`Your .env file at ${envFile} could not not be parsed.`);
        log_1.Log.error(err);
        process.exit(1);
    }
};
const getEnvironmentVariables = (onUpdate) => {
    const processEnv = getProcessEnv();
    if (parse_command_line_1.parsedCli['env-file']) {
        const envFile = path_1.default.resolve(process.cwd(), parse_command_line_1.parsedCli['env-file']);
        if (!fs_1.default.existsSync(envFile)) {
            log_1.Log.error('You passed a --env-file but it could not be found.');
            log_1.Log.error('We looked for the file at:', envFile);
            log_1.Log.error('Check that your path is correct and try again.');
            process.exit(1);
        }
        return getEnvForEnvFile(processEnv, envFile, onUpdate);
    }
    const remotionRoot = renderer_1.RenderInternals.findRemotionRoot();
    const configFileSetting = config_1.ConfigInternals.getDotEnvLocation();
    if (configFileSetting) {
        const envFile = path_1.default.resolve(remotionRoot, configFileSetting);
        if (!fs_1.default.existsSync(envFile)) {
            log_1.Log.error('You specified a custom .env file using `Config.setDotEnvLocation()` in the config file but it could not be found');
            log_1.Log.error('We looked for the file at:', envFile);
            log_1.Log.error('Check that your path is correct and try again.');
            process.exit(1);
        }
        return getEnvForEnvFile(processEnv, envFile, onUpdate);
    }
    const defaultEnvFile = path_1.default.resolve(remotionRoot, '.env');
    if (!fs_1.default.existsSync(defaultEnvFile)) {
        watchEnvFile({
            processEnv,
            envFile: defaultEnvFile,
            onUpdate,
            existedBefore: false,
        });
        return Promise.resolve(processEnv);
    }
    return getEnvForEnvFile(processEnv, defaultEnvFile, onUpdate);
};
exports.getEnvironmentVariables = getEnvironmentVariables;
