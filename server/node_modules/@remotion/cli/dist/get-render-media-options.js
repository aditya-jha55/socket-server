"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRenderMediaOptions = void 0;
const renderer_1 = require("@remotion/renderer");
const config_1 = require("./config");
const get_audio_codec_1 = require("./get-audio-codec");
const get_cli_options_1 = require("./get-cli-options");
const image_formats_1 = require("./image-formats");
const getRenderMediaOptions = async ({ outputLocation, config, serveUrl, codec, remotionRoot, }) => {
    const { proResProfile, concurrency, frameRange, overwrite, inputProps, envVariables, quality, crf, pixelFormat, browserExecutable, ffmpegExecutable, ffprobeExecutable, scale, chromiumOptions, port, numberOfGifLoops, everyNthFrame, muted, enforceAudioTrack, ffmpegOverride, audioBitrate, videoBitrate, height, width, } = await (0, get_cli_options_1.getCliOptions)({
        isLambda: false,
        type: 'series',
        remotionRoot,
    });
    const imageFormat = (0, image_formats_1.getImageFormat)(codec);
    const audioCodec = (0, get_audio_codec_1.getResolvedAudioCodec)();
    return {
        outputLocation,
        composition: {
            ...config,
            width: width !== null && width !== void 0 ? width : config.width,
            height: height !== null && height !== void 0 ? height : config.height,
        },
        crf,
        envVariables,
        ffmpegExecutable,
        ffprobeExecutable,
        frameRange,
        imageFormat,
        inputProps,
        overwrite,
        pixelFormat,
        proResProfile,
        quality,
        dumpBrowserLogs: renderer_1.RenderInternals.isEqualOrBelowLogLevel(config_1.ConfigInternals.Logging.getLogLevel(), 'verbose'),
        chromiumOptions,
        timeoutInMilliseconds: config_1.ConfigInternals.getCurrentPuppeteerTimeout(),
        scale,
        port,
        numberOfGifLoops,
        everyNthFrame,
        verbose: renderer_1.RenderInternals.isEqualOrBelowLogLevel(config_1.ConfigInternals.Logging.getLogLevel(), 'verbose'),
        muted,
        enforceAudioTrack,
        browserExecutable,
        ffmpegOverride,
        concurrency,
        serveUrl,
        codec,
        audioBitrate,
        videoBitrate,
        audioCodec,
    };
};
exports.getRenderMediaOptions = getRenderMediaOptions;
