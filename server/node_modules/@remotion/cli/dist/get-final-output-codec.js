"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFinalOutputCodec = void 0;
const renderer_1 = require("@remotion/renderer");
const deriveCodecsFromFilename = (extension) => {
    var _a, _b;
    if (extension === null) {
        return { possible: [], default: null };
    }
    return {
        default: (_a = renderer_1.RenderInternals.defaultCodecsForFileExtension[extension]) !== null && _a !== void 0 ? _a : null,
        possible: (_b = renderer_1.RenderInternals.makeFileExtensionMap()[extension]) !== null && _b !== void 0 ? _b : [],
    };
};
const getFinalOutputCodec = ({ cliFlag, configFile, downloadName, outName, }) => {
    const downloadNameExtension = renderer_1.RenderInternals.getExtensionOfFilename(downloadName);
    const outNameExtension = renderer_1.RenderInternals.getExtensionOfFilename(outName);
    const derivedDownloadCodecs = deriveCodecsFromFilename(downloadNameExtension);
    const derivedOutNameCodecs = deriveCodecsFromFilename(outNameExtension);
    if (derivedDownloadCodecs.possible.length > 0 &&
        derivedOutNameCodecs.possible.length > 0 &&
        derivedDownloadCodecs.possible.join('') !==
            derivedOutNameCodecs.possible.join('')) {
        throw new TypeError(`The download name is ${downloadName} but the output name is ${outName}. The file extensions must match`);
    }
    if (cliFlag) {
        if (derivedDownloadCodecs.possible.length > 0 &&
            derivedDownloadCodecs.possible.indexOf(cliFlag) === -1) {
            throw new TypeError(`The download name is ${downloadName} but --codec=${cliFlag} was passed. The download name implies a codec of ${derivedDownloadCodecs.possible.join(' or ')} which does not align with the --codec flag.`);
        }
        if (derivedOutNameCodecs.possible.length > 0 &&
            derivedOutNameCodecs.possible.indexOf(cliFlag) === -1) {
            throw new TypeError(`The out name is ${outName} but --codec=${cliFlag} was passed. The out name implies a codec of ${derivedOutNameCodecs.possible.join(' or ')} which does not align with the --codec flag.`);
        }
        return { codec: cliFlag, reason: 'from --codec flag' };
    }
    if (derivedDownloadCodecs.possible.length > 0) {
        return {
            codec: derivedDownloadCodecs.default,
            reason: 'derived from download name',
        };
    }
    if (derivedOutNameCodecs.possible.length > 0) {
        return {
            codec: derivedOutNameCodecs.default,
            reason: 'derived from out name',
        };
    }
    if (configFile) {
        return {
            codec: configFile,
            reason: 'Config file',
        };
    }
    return { codec: renderer_1.RenderInternals.DEFAULT_CODEC, reason: 'default' };
};
exports.getFinalOutputCodec = getFinalOutputCodec;
