"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollapsableOptions = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const colors_1 = require("../helpers/colors");
const z_index_1 = require("../state/z-index");
const layout_1 = require("./layout");
const TimelineCollapseToggle_1 = require("./Timeline/TimelineCollapseToggle");
const container = {
    marginLeft: 16,
    height: 40,
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
};
const buttonStyle = {
    border: 'none',
    padding: 0,
    appearance: 'none',
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
    fontSize: 14,
    color: colors_1.LIGHT_TEXT,
};
const CollapsableOptions = ({ children, showLabel, hideLabel }) => {
    const [show, setShow] = (0, react_1.useState)(false);
    const { tabIndex } = (0, z_index_1.useZIndex)();
    const onClick = (0, react_1.useCallback)(() => {
        setShow((s) => !s);
    }, []);
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("div", { style: container, children: (0, jsx_runtime_1.jsxs)("button", { style: buttonStyle, tabIndex: tabIndex, onClick: onClick, type: "button", children: [(0, jsx_runtime_1.jsx)(TimelineCollapseToggle_1.TimelineCollapseToggle, { color: colors_1.LIGHT_TEXT, collapsed: !show }), (0, jsx_runtime_1.jsx)(layout_1.Spacing, { block: true, x: 1 }), show ? hideLabel : showLabel] }) }), show ? children : null] }));
};
exports.CollapsableOptions = CollapsableOptions;
