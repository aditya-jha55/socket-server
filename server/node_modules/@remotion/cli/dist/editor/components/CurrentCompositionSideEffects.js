"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CurrentCompositionKeybindings = exports.TitleUpdater = void 0;
const react_1 = require("react");
const remotion_1 = require("remotion");
const client_id_1 = require("../helpers/client-id");
const use_keybinding_1 = require("../helpers/use-keybinding");
const NotificationCenter_1 = require("./Notifications/NotificationCenter");
const TitleUpdater = () => {
    const video = remotion_1.Internals.useVideo();
    (0, react_1.useEffect)(() => {
        if (!video) {
            document.title = 'Remotion Preview';
            return;
        }
        document.title = `${video.id} / ${window.remotion_projectName} - Remotion Preview`;
    }, [video]);
    return null;
};
exports.TitleUpdater = TitleUpdater;
const CurrentCompositionKeybindings = () => {
    const keybindings = (0, use_keybinding_1.useKeybinding)();
    const video = remotion_1.Internals.useVideo();
    const { type } = (0, react_1.useContext)(client_id_1.PreviewServerConnectionCtx);
    const openRenderModal = (0, react_1.useCallback)(() => {
        if (!video) {
            return;
        }
        if (type !== 'connected') {
            (0, NotificationCenter_1.sendErrorNotification)('Preview server is offline');
            return;
        }
        const renderButton = document.getElementById('render-modal-button');
        renderButton.click();
    }, [type, video]);
    (0, react_1.useEffect)(() => {
        const binding = keybindings.registerKeybinding({
            event: 'keydown',
            key: 'r',
            commandCtrlKey: false,
            callback: openRenderModal,
            preventDefault: true,
            triggerIfInputFieldFocused: false,
        });
        return () => {
            binding.unregister();
        };
    }, [keybindings, openRenderModal]);
    return null;
};
exports.CurrentCompositionKeybindings = CurrentCompositionKeybindings;
