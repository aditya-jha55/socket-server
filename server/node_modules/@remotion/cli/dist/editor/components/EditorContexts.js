"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EditorContexts = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const player_1 = require("@remotion/player");
const react_1 = require("react");
const remotion_1 = require("remotion");
const checkerboard_1 = require("../state/checkerboard");
const editor_zoom_gestures_1 = require("../state/editor-zoom-gestures");
const folders_1 = require("../state/folders");
const highest_z_index_1 = require("../state/highest-z-index");
const in_out_1 = require("../state/in-out");
const keybindings_1 = require("../state/keybindings");
const modals_1 = require("../state/modals");
const mute_1 = require("../state/mute");
const preview_size_1 = require("../state/preview-size");
const rich_timeline_1 = require("../state/rich-timeline");
const sidebar_1 = require("../state/sidebar");
const EditorContexts = ({ children }) => {
    const [inAndOutFrames, setInAndOutFrames] = (0, react_1.useState)({
        inFrame: null,
        outFrame: null,
    });
    const timelineInOutContextValue = (0, react_1.useMemo)(() => {
        return inAndOutFrames;
    }, [inAndOutFrames]);
    const [emitter] = (0, react_1.useState)(() => new player_1.PlayerInternals.PlayerEmitter());
    const setTimelineInOutContextValue = (0, react_1.useMemo)(() => {
        return {
            setInAndOutFrames,
        };
    }, []);
    const [checkerboard, setCheckerboardState] = (0, react_1.useState)(() => (0, checkerboard_1.loadCheckerboardOption)());
    const setCheckerboard = (0, react_1.useCallback)((newValue) => {
        setCheckerboardState((prevState) => {
            const newVal = newValue(prevState);
            (0, checkerboard_1.persistCheckerboardOption)(newVal);
            return newVal;
        });
    }, []);
    const [editorZoomGestures, setEditorZoomGesturesState] = (0, react_1.useState)(() => (0, editor_zoom_gestures_1.loadEditorZoomGesturesOption)());
    const setEditorZoomGestures = (0, react_1.useCallback)((newValue) => {
        setEditorZoomGesturesState((prevState) => {
            const newVal = newValue(prevState);
            (0, editor_zoom_gestures_1.persistEditorZoomGesturesOption)(newVal);
            return newVal;
        });
    }, []);
    const [richTimeline, setRichTimelineState] = (0, react_1.useState)(() => (0, rich_timeline_1.loadRichTimelineOption)());
    const setRichTimeline = (0, react_1.useCallback)((newValue) => {
        setRichTimelineState((prevState) => {
            const newVal = newValue(prevState);
            (0, rich_timeline_1.persistRichTimelineOption)(newVal);
            return newVal;
        });
    }, []);
    const [mediaMuted, setMediaMuted] = (0, react_1.useState)(() => (0, mute_1.loadMuteOption)());
    const [mediaVolume, setMediaVolume] = (0, react_1.useState)(1);
    const [modalContextType, setModalContextType] = (0, react_1.useState)(null);
    const checkerboardCtx = (0, react_1.useMemo)(() => {
        return {
            checkerboard,
            setCheckerboard,
        };
    }, [checkerboard, setCheckerboard]);
    const editorZoomGesturesCtx = (0, react_1.useMemo)(() => {
        return {
            editorZoomGestures,
            setEditorZoomGestures,
        };
    }, [editorZoomGestures, setEditorZoomGestures]);
    const richTimelineCtx = (0, react_1.useMemo)(() => {
        return {
            richTimeline,
            setRichTimeline,
        };
    }, [richTimeline, setRichTimeline]);
    const mediaVolumeContextValue = (0, react_1.useMemo)(() => {
        return {
            mediaMuted,
            mediaVolume,
        };
    }, [mediaMuted, mediaVolume]);
    const setMediaVolumeContextValue = (0, react_1.useMemo)(() => {
        return {
            setMediaMuted,
            setMediaVolume,
        };
    }, []);
    const modalsContext = (0, react_1.useMemo)(() => {
        return {
            selectedModal: modalContextType,
            setSelectedModal: setModalContextType,
        };
    }, [modalContextType]);
    return ((0, jsx_runtime_1.jsx)(keybindings_1.KeybindingContextProvider, { children: (0, jsx_runtime_1.jsx)(rich_timeline_1.RichTimelineContext.Provider, { value: richTimelineCtx, children: (0, jsx_runtime_1.jsx)(checkerboard_1.CheckerboardContext.Provider, { value: checkerboardCtx, children: (0, jsx_runtime_1.jsx)(editor_zoom_gestures_1.EditorZoomGesturesContext.Provider, { value: editorZoomGesturesCtx, children: (0, jsx_runtime_1.jsx)(preview_size_1.PreviewSizeProvider, { children: (0, jsx_runtime_1.jsx)(modals_1.ModalsContext.Provider, { value: modalsContext, children: (0, jsx_runtime_1.jsx)(remotion_1.Internals.MediaVolumeContext.Provider, { value: mediaVolumeContextValue, children: (0, jsx_runtime_1.jsx)(remotion_1.Internals.SetMediaVolumeContext.Provider, { value: setMediaVolumeContextValue, children: (0, jsx_runtime_1.jsx)(player_1.PlayerInternals.PlayerEventEmitterContext.Provider, { value: emitter, children: (0, jsx_runtime_1.jsx)(sidebar_1.SidebarContextProvider, { children: (0, jsx_runtime_1.jsx)(folders_1.FolderContextProvider, { children: (0, jsx_runtime_1.jsx)(highest_z_index_1.HighestZIndexProvider, { children: (0, jsx_runtime_1.jsx)(in_out_1.TimelineInOutContext.Provider, { value: timelineInOutContextValue, children: (0, jsx_runtime_1.jsx)(in_out_1.SetTimelineInOutContext.Provider, { value: setTimelineInOutContextValue, children: children }) }) }) }) }) }) }) }) }) }) }) }) }) }));
};
exports.EditorContexts = EditorContexts;
