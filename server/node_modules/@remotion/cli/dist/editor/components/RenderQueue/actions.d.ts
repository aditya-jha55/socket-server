import type { AudioCodec, Codec, PixelFormat, ProResProfile, StillImageFormat, VideoImageFormat } from '@remotion/renderer';
import type { ApiRoutes } from '../../../preview-server/api-types';
import type { RenderJob } from '../../../preview-server/render-queue/job';
import type { RequiredChromiumOptions } from '../../../required-chromium-options';
export declare const callApi: <Endpoint extends keyof ApiRoutes>(endpoint: Endpoint, body: ApiRoutes[Endpoint]["Request"]) => Promise<ApiRoutes[Endpoint]["Response"]>;
export declare const addStillRenderJob: ({ compositionId, outName, imageFormat, quality, frame, scale, verbose, chromiumOptions, delayRenderTimeout, envVariables, inputProps, }: {
    compositionId: string;
    outName: string;
    imageFormat: StillImageFormat;
    quality: number | null;
    frame: number;
    scale: number;
    verbose: boolean;
    chromiumOptions: RequiredChromiumOptions;
    delayRenderTimeout: number;
    envVariables: Record<string, string>;
    inputProps: unknown;
}) => Promise<undefined>;
export declare const addVideoRenderJob: ({ compositionId, outName, imageFormat, quality, scale, verbose, codec, concurrency, crf, startFrame, endFrame, muted, enforceAudioTrack, proResProfile, pixelFormat, audioBitrate, videoBitrate, everyNthFrame, numberOfGifLoops, delayRenderTimeout, audioCodec, disallowParallelEncoding, chromiumOptions, envVariables, inputProps, }: {
    compositionId: string;
    outName: string;
    imageFormat: VideoImageFormat;
    quality: number | null;
    scale: number;
    verbose: boolean;
    codec: Codec;
    concurrency: number;
    crf: number | null;
    startFrame: number;
    endFrame: number;
    muted: boolean;
    enforceAudioTrack: boolean;
    proResProfile: ProResProfile | null;
    pixelFormat: PixelFormat;
    audioBitrate: string | null;
    videoBitrate: string | null;
    everyNthFrame: number;
    numberOfGifLoops: number | null;
    delayRenderTimeout: number;
    audioCodec: AudioCodec;
    disallowParallelEncoding: boolean;
    chromiumOptions: RequiredChromiumOptions;
    envVariables: Record<string, string>;
    inputProps: unknown;
}) => Promise<undefined>;
export declare const unsubscribeFromFileExistenceWatcher: ({ file, clientId, }: {
    file: string;
    clientId: string;
}) => Promise<undefined>;
export declare const subscribeToFileExistenceWatcher: ({ file, clientId, }: {
    file: string;
    clientId: string;
}) => Promise<boolean>;
export declare const openInFileExplorer: ({ directory }: {
    directory: string;
}) => Promise<void>;
export declare const removeRenderJob: (job: RenderJob) => Promise<undefined>;
export declare const cancelRenderJob: (job: RenderJob) => Promise<import("../../../preview-server/render-queue/job").CancelRenderResponse>;
export declare const updateDefaultProps: (compositionId: string, defaultProps: unknown) => Promise<void>;
