"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZoomPersistor = exports.getZoomForComposition = exports.persistCurrentZoom = void 0;
const react_1 = require("react");
const remotion_1 = require("remotion");
const timeline_zoom_1 = require("../state/timeline-zoom");
const FramePersistor_1 = require("./FramePersistor");
const makeKey = (composition) => {
    return `remotion.zoom.${composition}`;
};
const persistCurrentZoom = (zoom) => {
    const currentComposition = (0, FramePersistor_1.getCurrentCompositionFromUrl)();
    if (!currentComposition) {
        return;
    }
    localStorage.setItem(makeKey(currentComposition), String(zoom));
};
exports.persistCurrentZoom = persistCurrentZoom;
const getZoomForComposition = (composition) => {
    const zoom = localStorage.getItem(makeKey(composition));
    return zoom ? Number(zoom) : 0;
};
exports.getZoomForComposition = getZoomForComposition;
const ZoomPersistor = () => {
    const [playing] = remotion_1.Internals.Timeline.usePlayingState();
    const { zoom } = (0, react_1.useContext)(timeline_zoom_1.TimelineZoomCtx);
    const { currentComposition } = (0, react_1.useContext)(remotion_1.Internals.CompositionManager);
    const isActive = currentComposition === (0, FramePersistor_1.getCurrentCompositionFromUrl)();
    (0, react_1.useEffect)(() => {
        if (!isActive) {
            return;
        }
        (0, exports.persistCurrentZoom)(zoom);
    }, [zoom, isActive, playing]);
    return null;
};
exports.ZoomPersistor = ZoomPersistor;
