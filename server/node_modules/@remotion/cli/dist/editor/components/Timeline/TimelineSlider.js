"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimelineSlider = exports.redrawTimelineSliderFast = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const remotion_1 = require("remotion");
const get_left_of_timeline_slider_1 = require("../../helpers/get-left-of-timeline-slider");
const imperative_state_1 = require("./imperative-state");
const timeline_refs_1 = require("./timeline-refs");
const TimelineSliderHandle_1 = require("./TimelineSliderHandle");
const container = {
    position: 'absolute',
    bottom: 0,
    top: 0,
    pointerEvents: 'none',
};
const line = {
    height: '100%',
    width: 1,
    position: 'fixed',
    backgroundColor: '#f02c00',
};
exports.redrawTimelineSliderFast = (0, react_1.createRef)();
const TimelineSlider = () => {
    const timelinePosition = remotion_1.Internals.Timeline.useTimelinePosition();
    const { get } = (0, get_left_of_timeline_slider_1.useGetXPositionOfItemInTimeline)();
    const ref = (0, react_1.useRef)(null);
    const style = (0, react_1.useMemo)(() => {
        const left = get(timelinePosition);
        return {
            ...container,
            transform: `translateX(${left}px)`,
        };
    }, [timelinePosition, get]);
    (0, react_1.useImperativeHandle)(exports.redrawTimelineSliderFast, () => {
        return {
            draw: (frame, width) => {
                var _a, _b;
                const { current } = ref;
                if (!current) {
                    throw new Error('unexpectedly did not have ref to timelineslider');
                }
                current.style.transform = `translateX(${(0, get_left_of_timeline_slider_1.getXPositionOfItemInTimelineImperatively)(frame, (0, imperative_state_1.getCurrentDuration)(), (_b = width !== null && width !== void 0 ? width : (_a = timeline_refs_1.sliderAreaRef.current) === null || _a === void 0 ? void 0 : _a.clientWidth) !== null && _b !== void 0 ? _b : 0)}px)`;
            },
        };
    }, []);
    (0, react_1.useEffect)(() => {
        const currentRef = ref.current;
        if (!currentRef) {
            return;
        }
        const { current } = timeline_refs_1.timelineVerticalScroll;
        if (!current) {
            return;
        }
        const onScroll = () => {
            currentRef.style.top = current.scrollTop + 'px';
        };
        current.addEventListener('scroll', onScroll);
        return () => {
            current.removeEventListener('scroll', onScroll);
        };
    }, []);
    return ((0, jsx_runtime_1.jsxs)("div", { ref: ref, style: style, children: [(0, jsx_runtime_1.jsx)("div", { style: line }), (0, jsx_runtime_1.jsx)(TimelineSliderHandle_1.TimelineSliderHandle, {})] }));
};
exports.TimelineSlider = TimelineSlider;
