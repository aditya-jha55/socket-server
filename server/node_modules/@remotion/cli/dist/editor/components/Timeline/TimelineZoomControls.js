"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimelineZoomControls = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const is_current_selected_still_1 = require("../../helpers/is-current-selected-still");
const minus_1 = require("../../icons/minus");
const plus_1 = require("../../icons/plus");
const timeline_zoom_1 = require("../../state/timeline-zoom");
const z_index_1 = require("../../state/z-index");
const ControlButton_1 = require("../ControlButton");
const layout_1 = require("../layout");
const container = {
    color: 'black',
    flexDirection: 'row',
    display: 'flex',
};
const buttonStyle = {
    fontSize: 24,
};
const iconStyle = {
    color: 'white',
    width: 14,
};
const slider = {
    width: 60,
    accentColor: 'var(--blue)',
};
const TimelineZoomControls = () => {
    const { setZoom, zoom } = (0, react_1.useContext)(timeline_zoom_1.TimelineZoomCtx);
    const { tabIndex } = (0, z_index_1.useZIndex)();
    const onMinusClicked = (0, react_1.useCallback)(() => {
        setZoom((z) => Math.max(timeline_zoom_1.TIMELINE_MIN_ZOOM, z - 0.2));
    }, [setZoom]);
    const onPlusClicked = (0, react_1.useCallback)(() => {
        setZoom((z) => Math.min(timeline_zoom_1.TIMELINE_MAX_ZOOM, z + 0.2));
    }, [setZoom]);
    const onChange = (0, react_1.useCallback)((e) => {
        setZoom(() => Number(e.target.value));
    }, [setZoom]);
    const isStill = (0, is_current_selected_still_1.useIsStill)();
    if (isStill) {
        return null;
    }
    return ((0, jsx_runtime_1.jsxs)("div", { style: container, children: [(0, jsx_runtime_1.jsx)(ControlButton_1.ControlButton, { onClick: onMinusClicked, style: buttonStyle, title: "Zoom out timeline", role: 'ControlButton', type: "button", disabled: timeline_zoom_1.TIMELINE_MIN_ZOOM === zoom, children: (0, jsx_runtime_1.jsx)(minus_1.Minus, { style: iconStyle }) }), (0, jsx_runtime_1.jsx)(layout_1.Spacing, { x: 0.5 }), (0, jsx_runtime_1.jsx)("input", { title: `Timeline zoom (${zoom}x)`, alt: `Timeline zoom (${zoom}x)`, type: 'range', min: timeline_zoom_1.TIMELINE_MIN_ZOOM, step: 0.1, value: zoom, max: timeline_zoom_1.TIMELINE_MAX_ZOOM, onChange: onChange, style: slider, tabIndex: tabIndex }), (0, jsx_runtime_1.jsx)(layout_1.Spacing, { x: 0.5 }), (0, jsx_runtime_1.jsx)(ControlButton_1.ControlButton, { onClick: onPlusClicked, style: buttonStyle, title: "Zoom in timeline", role: 'button', type: "button", disabled: timeline_zoom_1.TIMELINE_MAX_ZOOM === zoom, children: (0, jsx_runtime_1.jsx)(plus_1.Plus, { style: iconStyle }) })] }));
};
exports.TimelineZoomControls = TimelineZoomControls;
