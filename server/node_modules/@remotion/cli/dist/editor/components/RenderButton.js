"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const get_default_out_name_1 = require("../../get-default-out-name");
const get_default_video_contexts_1 = require("../../preview-server/render-queue/get-default-video-contexts");
const render_1 = require("../icons/render");
const modals_1 = require("../state/modals");
const InlineAction_1 = require("./InlineAction");
const RenderButton = ({ composition, visible }) => {
    const { setSelectedModal } = (0, react_1.useContext)(modals_1.ModalsContext);
    const iconStyle = (0, react_1.useMemo)(() => {
        return {
            style: {
                height: 12,
            },
        };
    }, []);
    const isVideo = composition.durationInFrames > 1;
    const onClick = (0, react_1.useCallback)((e) => {
        const defaults = window.remotion_renderDefaults;
        if (!defaults) {
            throw new Error('expected defaults');
        }
        e.stopPropagation();
        const { initialAudioCodec, initialRenderType, initialVideoCodec } = (0, get_default_video_contexts_1.getDefaultCodecs)({
            defaultCodec: defaults.codec,
            isStill: !isVideo,
        });
        setSelectedModal({
            type: 'render',
            compositionId: composition.id,
            initialFrame: 0,
            initialVideoImageFormat: defaults.videoImageFormat,
            initialStillImageFormat: defaults.stillImageFormat,
            initialQuality: defaults.quality,
            initialScale: defaults.scale,
            initialVerbose: defaults.logLevel === 'verbose',
            initialOutName: (0, get_default_out_name_1.getDefaultOutLocation)({
                compositionName: composition.id,
                defaultExtension: isVideo ? 'mp4' : 'png',
                type: 'asset',
            }),
            initialVideoCodecForAudioTab: initialAudioCodec,
            initialRenderType,
            initialVideoCodecForVideoTab: initialVideoCodec,
            initialConcurrency: defaults.concurrency,
            maxConcurrency: defaults.maxConcurrency,
            minConcurrency: defaults.minConcurrency,
            initialMuted: defaults.muted,
            initialEnforceAudioTrack: defaults.enforceAudioTrack,
            initialProResProfile: defaults.proResProfile,
            initialPixelFormat: defaults.pixelFormat,
            initialAudioBitrate: defaults.audioBitrate,
            initialVideoBitrate: defaults.videoBitrate,
            initialEveryNthFrame: defaults.everyNthFrame,
            initialNumberOfGifLoops: defaults.numberOfGifLoops,
            initialDelayRenderTimeout: defaults.delayRenderTimeout,
            initialAudioCodec: defaults.audioCodec,
            initialEnvVariables: window.process.env,
            initialDisableWebSecurity: defaults.disableWebSecurity,
            initialOpenGlRenderer: defaults.openGlRenderer,
            initialHeadless: defaults.headless,
            initialIgnoreCertificateErrors: defaults.ignoreCertificateErrors,
        });
    }, [composition.id, isVideo, setSelectedModal]);
    if (!visible) {
        return null;
    }
    return ((0, jsx_runtime_1.jsx)(InlineAction_1.InlineAction, { onClick: onClick, children: (0, jsx_runtime_1.jsx)(render_1.ThinRenderIcon, { svgProps: iconStyle }) }));
};
exports.RenderButton = RenderButton;
