"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RightPanel = exports.rightSidebarTabs = exports.persistSelectedPanel = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const remotion_1 = require("remotion");
const colors_1 = require("../helpers/colors");
const RenderModalData_1 = require("./RenderModal/RenderModalData");
const RenderQueue_1 = require("./RenderQueue");
const RendersTab_1 = require("./RendersTab");
const Tabs_1 = require("./Tabs");
const container = {
    height: '100%',
    width: '100%',
    position: 'absolute',
    display: 'flex',
    flexDirection: 'column',
};
const PropsEditor = ({ composition }) => {
    var _a;
    const { props, updateProps } = (0, react_1.useContext)(remotion_1.Internals.EditorPropsContext);
    // TODO: Warn if inputProps were specified to the CLI, then
    // they take priority over defaultProps
    const setInputProps = (0, react_1.useCallback)((newProps) => {
        updateProps({
            id: composition.id,
            defaultProps: composition.defaultProps,
            newProps: newProps,
        });
    }, [composition.defaultProps, composition.id, updateProps]);
    return ((0, jsx_runtime_1.jsx)(RenderModalData_1.RenderModalData, { composition: composition, inputProps: (_a = props[composition.id]) !== null && _a !== void 0 ? _a : composition.defaultProps, setInputProps: setInputProps, compact: true, showSaveButton: true }));
};
const localStorageKey = 'remotion.sidebarPanel';
const getSelectedPanel = () => {
    const panel = localStorage.getItem(localStorageKey);
    if (panel === 'renders') {
        return 'renders';
    }
    return 'input-props';
};
const tabsContainer = {
    borderBottom: `1px solid ${colors_1.BORDER_COLOR}`,
};
const persistSelectedPanel = (panel) => {
    localStorage.setItem(localStorageKey, panel);
};
exports.persistSelectedPanel = persistSelectedPanel;
exports.rightSidebarTabs = (0, react_1.createRef)();
const RightPanel = () => {
    const [panel, setPanel] = (0, react_1.useState)(() => getSelectedPanel());
    const onCompositionsSelected = (0, react_1.useCallback)(() => {
        setPanel('input-props');
        (0, exports.persistSelectedPanel)('input-props');
    }, []);
    const onRendersSelected = (0, react_1.useCallback)(() => {
        setPanel('renders');
        (0, exports.persistSelectedPanel)('renders');
    }, []);
    (0, react_1.useImperativeHandle)(exports.rightSidebarTabs, () => {
        return {
            selectRendersPanel: () => {
                setPanel('renders');
                (0, exports.persistSelectedPanel)('renders');
            },
        };
    }, []);
    const { compositions, currentComposition } = (0, react_1.useContext)(remotion_1.Internals.CompositionManager);
    const composition = (0, react_1.useMemo)(() => {
        for (const comp of compositions) {
            if (comp.id === currentComposition) {
                return comp;
            }
        }
        return null;
    }, [compositions, currentComposition]);
    if (composition === null) {
        return null;
    }
    return ((0, jsx_runtime_1.jsxs)("div", { style: container, className: "css-reset", children: [(0, jsx_runtime_1.jsx)("div", { style: tabsContainer, children: (0, jsx_runtime_1.jsxs)(Tabs_1.Tabs, { children: [(0, jsx_runtime_1.jsx)(Tabs_1.Tab, { selected: panel === 'input-props', onClick: onCompositionsSelected, children: "Default Props" }), (0, jsx_runtime_1.jsx)(RendersTab_1.RendersTab, { onClick: onRendersSelected, selected: panel === 'renders' })] }) }), panel === 'renders' ? ((0, jsx_runtime_1.jsx)(RenderQueue_1.RenderQueue, {})) : ((0, jsx_runtime_1.jsx)(PropsEditor, { composition: composition }))] }));
};
exports.RightPanel = RightPanel;
