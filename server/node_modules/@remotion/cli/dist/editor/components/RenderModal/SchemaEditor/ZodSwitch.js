"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZodSwitch = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const remotion_1 = require("remotion");
const ZodArrayEditor_1 = require("./ZodArrayEditor");
const ZodBooleanEditor_1 = require("./ZodBooleanEditor");
const ZodDateEditor_1 = require("./ZodDateEditor");
const ZodEffectEditor_1 = require("./ZodEffectEditor");
const ZodEnumEditor_1 = require("./ZodEnumEditor");
const ZodNonEditableValue_1 = require("./ZodNonEditableValue");
const ZodNumberEditor_1 = require("./ZodNumberEditor");
const ZodObjectEditor_1 = require("./ZodObjectEditor");
const ZodStringEditor_1 = require("./ZodStringEditor");
const ZodSwitch = ({ schema, jsonPath, compact, value, setValue, defaultValue, onSave, showSaveButton, onRemove, }) => {
    const def = schema._def;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const typeName = def.typeName;
    // TODO: (Maybe?) enable saving of inserted input props by cmd+s /ctrl + s (also for JSON view)
    if (typeName === remotion_1.z.ZodFirstPartyTypeKind.ZodObject) {
        return ((0, jsx_runtime_1.jsx)(ZodObjectEditor_1.ZodObjectEditor, { setValue: setValue, value: value, defaultValue: defaultValue, jsonPath: jsonPath, schema: schema, compact: compact, onSave: onSave, showSaveButton: showSaveButton, onRemove: onRemove }));
    }
    if (typeName === remotion_1.z.ZodFirstPartyTypeKind.ZodString) {
        return ((0, jsx_runtime_1.jsx)(ZodStringEditor_1.ZodStringEditor, { value: value, setValue: setValue, jsonPath: jsonPath, schema: schema, compact: compact, onSave: onSave, defaultValue: defaultValue, showSaveButton: showSaveButton, onRemove: onRemove }));
    }
    if (typeName === remotion_1.z.ZodFirstPartyTypeKind.ZodDate) {
        return ((0, jsx_runtime_1.jsx)(ZodDateEditor_1.ZodDateEditor, { value: value, setValue: setValue, jsonPath: jsonPath, schema: schema, compact: compact, onSave: onSave, defaultValue: defaultValue, showSaveButton: showSaveButton, onRemove: onRemove }));
    }
    if (typeName === remotion_1.z.ZodFirstPartyTypeKind.ZodNumber) {
        return ((0, jsx_runtime_1.jsx)(ZodNumberEditor_1.ZodNumberEditor, { value: value, setValue: setValue, jsonPath: jsonPath, schema: schema, compact: compact, defaultValue: defaultValue, onSave: onSave, showSaveButton: showSaveButton, onRemove: onRemove }));
    }
    if (typeName === remotion_1.z.ZodFirstPartyTypeKind.ZodBoolean) {
        return ((0, jsx_runtime_1.jsx)(ZodBooleanEditor_1.ZodBooleanEditor, { value: value, setValue: setValue, jsonPath: jsonPath, compact: compact, defaultValue: defaultValue, onSave: onSave, showSaveButton: showSaveButton, onRemove: onRemove }));
    }
    if (typeName === remotion_1.z.ZodFirstPartyTypeKind.ZodUndefined) {
        return ((0, jsx_runtime_1.jsx)(ZodNonEditableValue_1.ZonNonEditableValue, { compact: compact, jsonPath: jsonPath, showSaveButton: showSaveButton, label: 'undefined' }));
    }
    if (typeName === remotion_1.z.ZodFirstPartyTypeKind.ZodNull) {
        return ((0, jsx_runtime_1.jsx)(ZodNonEditableValue_1.ZonNonEditableValue, { compact: compact, jsonPath: jsonPath, showSaveButton: showSaveButton, label: 'null' }));
    }
    if (typeName === remotion_1.z.ZodFirstPartyTypeKind.ZodAny) {
        return ((0, jsx_runtime_1.jsx)(ZodNonEditableValue_1.ZonNonEditableValue, { compact: compact, jsonPath: jsonPath, showSaveButton: showSaveButton, label: 'any (not editable)' }));
    }
    if (typeName === remotion_1.z.ZodFirstPartyTypeKind.ZodBigInt) {
        return ((0, jsx_runtime_1.jsx)(ZodNonEditableValue_1.ZonNonEditableValue, { compact: compact, jsonPath: jsonPath, showSaveButton: showSaveButton, label: 'BigInt (not editable)' }));
    }
    if (typeName === remotion_1.z.ZodFirstPartyTypeKind.ZodUnknown) {
        return ((0, jsx_runtime_1.jsx)(ZodNonEditableValue_1.ZonNonEditableValue, { compact: compact, jsonPath: jsonPath, showSaveButton: showSaveButton, label: 'unknown (not editable)' }));
    }
    if (typeName === remotion_1.z.ZodFirstPartyTypeKind.ZodArray) {
        return ((0, jsx_runtime_1.jsx)(ZodArrayEditor_1.ZodArrayEditor, { setValue: setValue, value: value, jsonPath: jsonPath, schema: schema, compact: compact, defaultValue: defaultValue, onSave: onSave, showSaveButton: showSaveButton, onRemove: onRemove }));
    }
    if (typeName === remotion_1.z.ZodFirstPartyTypeKind.ZodEnum) {
        return ((0, jsx_runtime_1.jsx)(ZodEnumEditor_1.ZodEnumEditor, { setValue: setValue, value: value, jsonPath: jsonPath, schema: schema, compact: compact, defaultValue: defaultValue, onSave: onSave, showSaveButton: showSaveButton, onRemove: onRemove }));
    }
    if (typeName === remotion_1.z.ZodFirstPartyTypeKind.ZodEffects) {
        return ((0, jsx_runtime_1.jsx)(ZodEffectEditor_1.ZodEffectEditor, { value: value, setValue: setValue, jsonPath: jsonPath, schema: schema, compact: compact, defaultValue: defaultValue, onSave: onSave, showSaveButton: showSaveButton, onRemove: onRemove }));
    }
    return ((0, jsx_runtime_1.jsx)(ZodNonEditableValue_1.ZonNonEditableValue, { compact: compact, jsonPath: jsonPath, showSaveButton: showSaveButton, label: `${typeName} (not editable)` }));
};
exports.ZodSwitch = ZodSwitch;
