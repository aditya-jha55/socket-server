"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderModalData = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const colors_1 = require("../../helpers/colors");
const actions_1 = require("../RenderQueue/actions");
const SegmentedControl_1 = require("../SegmentedControl");
const RenderModalJSONInputPropsEditor_1 = require("./RenderModalJSONInputPropsEditor");
const SchemaEditor_1 = require("./SchemaEditor/SchemaEditor");
const outer = {
    display: 'flex',
    flexDirection: 'column',
    flex: 1,
    overflow: 'hidden',
};
const controlContainer = {
    flexDirection: 'row',
    display: 'flex',
    paddingLeft: 12,
    paddingTop: 12,
    paddingBottom: 12,
    borderBottom: `1px solid ${colors_1.BORDER_COLOR}`,
};
const RenderModalData = ({ composition, inputProps, setInputProps, compact, showSaveButton }) => {
    const [mode, setMode] = (0, react_1.useState)('schema');
    const [valBeforeSafe, setValBeforeSafe] = (0, react_1.useState)(inputProps);
    const zodValidationResult = (0, react_1.useMemo)(() => {
        return composition.schema.safeParse(inputProps);
    }, [composition.schema, inputProps]);
    const modeItems = (0, react_1.useMemo)(() => {
        return [
            {
                key: 'schema',
                label: 'Schema',
                onClick: () => {
                    setMode('schema');
                },
                selected: mode === 'schema',
            },
            {
                key: 'json',
                label: 'JSON',
                onClick: () => {
                    setMode('json');
                },
                selected: mode === 'json',
            },
        ];
    }, [mode]);
    const switchToSchema = (0, react_1.useCallback)(() => {
        setMode('schema');
    }, []);
    const onUpdate = (0, react_1.useCallback)(() => {
        setValBeforeSafe(inputProps);
        (0, actions_1.updateDefaultProps)(composition.id, inputProps);
    }, [composition.id, inputProps]);
    const onSave = (0, react_1.useCallback)((updater) => {
        (0, actions_1.updateDefaultProps)(composition.id, updater(composition.defaultProps));
    }, [composition.defaultProps, composition.id]);
    return ((0, jsx_runtime_1.jsxs)("div", { style: outer, children: [(0, jsx_runtime_1.jsx)("div", { style: controlContainer, children: (0, jsx_runtime_1.jsx)(SegmentedControl_1.SegmentedControl, { items: modeItems, needsWrapping: false }) }), mode === 'schema' ? ((0, jsx_runtime_1.jsx)(SchemaEditor_1.SchemaEditor, { value: inputProps, setValue: setInputProps, schema: composition.schema, zodValidationResult: zodValidationResult, compact: compact, defaultProps: composition.defaultProps, onSave: onSave, showSaveButton: showSaveButton })) : ((0, jsx_runtime_1.jsx)(RenderModalJSONInputPropsEditor_1.RenderModalJSONInputPropsEditor, { value: inputProps !== null && inputProps !== void 0 ? inputProps : {}, setValue: setInputProps, zodValidationResult: zodValidationResult, switchToSchema: switchToSchema, onSave: onUpdate, valBeforeSafe: valBeforeSafe }))] }));
};
exports.RenderModalData = RenderModalData;
