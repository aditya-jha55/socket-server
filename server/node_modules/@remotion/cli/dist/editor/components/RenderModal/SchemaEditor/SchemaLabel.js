"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaFieldsetLabel = exports.SchemaLabel = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const colors_1 = require("../../../helpers/colors");
const layout_1 = require("../../layout");
const InlineRemoveButton_1 = require("../InlineRemoveButton");
const layout_2 = require("../layout");
const get_schema_label_1 = require("./get-schema-label");
const SchemaResetButton_1 = require("./SchemaResetButton");
const SchemaSaveButton_1 = require("./SchemaSaveButton");
const commonStyles = {
    fontSize: 15,
    color: colors_1.LIGHT_TEXT,
    fontFamily: 'sans-serif',
    lineHeight: '40px',
};
const compactStyles = {
    ...commonStyles,
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
};
const wideStyles = {
    ...commonStyles,
    width: layout_2.label.width,
    lineHeight: '36px',
};
const labelStyle = {
    fontFamily: 'monospace',
    fontSize: 14,
    color: colors_1.LIGHT_TEXT,
};
const SchemaLabel = ({ jsonPath, isDefaultValue, onReset, onSave, showSaveButton, compact, onRemove, }) => {
    return ((0, jsx_runtime_1.jsxs)("div", { style: compact ? compactStyles : wideStyles, children: [(0, jsx_runtime_1.jsx)("span", { style: labelStyle, children: (0, get_schema_label_1.getSchemaLabel)(jsonPath) }), compact ? (0, jsx_runtime_1.jsx)(layout_1.Flex, {}) : (0, jsx_runtime_1.jsx)(layout_1.Spacing, { x: 1 }), isDefaultValue ? null : (0, jsx_runtime_1.jsx)(SchemaResetButton_1.SchemaResetButton, { onClick: onReset }), isDefaultValue ? null : showSaveButton ? ((0, jsx_runtime_1.jsx)(SchemaSaveButton_1.SchemaSaveButton, { onClick: onSave })) : null, onRemove ? (0, jsx_runtime_1.jsx)(InlineRemoveButton_1.InlineRemoveButton, { onClick: onRemove }) : null] }));
};
exports.SchemaLabel = SchemaLabel;
const SchemaFieldsetLabel = ({ jsonPath, onRemove }) => {
    return ((0, jsx_runtime_1.jsxs)("legend", { style: layout_2.fieldsetLabel, children: [(0, get_schema_label_1.getSchemaLabel)(jsonPath), (0, jsx_runtime_1.jsx)(layout_1.Flex, {}), onRemove ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(layout_1.Spacing, { x: 1 }), " ", (0, jsx_runtime_1.jsx)(InlineRemoveButton_1.InlineRemoveButton, { onClick: onRemove })] })) : null] }));
};
exports.SchemaFieldsetLabel = SchemaFieldsetLabel;
