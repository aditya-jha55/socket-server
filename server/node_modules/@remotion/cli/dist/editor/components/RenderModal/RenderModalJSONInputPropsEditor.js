"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderModalJSONInputPropsEditor = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const Button_1 = require("../../../preview-server/error-overlay/remotion-overlay/Button");
const layout_1 = require("../layout");
const RemTextarea_1 = require("../NewComposition/RemTextarea");
const ValidationMessage_1 = require("../NewComposition/ValidationMessage");
const date_serialization_1 = require("./SchemaEditor/date-serialization");
const parseJSON = (str) => {
    try {
        const value = (0, date_serialization_1.deserializeJSONWithDate)(str);
        return { str, value, validJSON: true };
    }
    catch (e) {
        return { str, validJSON: false, error: e.message };
    }
};
const style = {
    fontFamily: 'monospace',
    flex: 1,
};
const schemaButton = {
    border: 'none',
    padding: 0,
    display: 'inline-block',
    cursor: 'pointer',
    backgroundColor: 'transparent',
};
const scrollable = {
    padding: '8px 12px',
    display: 'flex',
    flexDirection: 'column',
    flex: 1,
};
// TODO: Note if custom 'remotion-date:' pattern has been used
const RenderModalJSONInputPropsEditor = ({ setValue, value, zodValidationResult, switchToSchema, onSave, valBeforeSafe, }) => {
    const [localValue, setLocalValue] = react_1.default.useState(() => {
        return parseJSON((0, date_serialization_1.serializeJSONWithDate)(value, 2));
    });
    const onPretty = (0, react_1.useCallback)(() => {
        if (!localValue.validJSON) {
            return;
        }
        const parsed = JSON.parse(localValue.str);
        setLocalValue({ ...localValue, str: JSON.stringify(parsed, null, 2) });
    }, [localValue]);
    const onChange = (0, react_1.useCallback)((e) => {
        const parsed = parseJSON(e.target.value);
        if (parsed.validJSON) {
            setLocalValue({
                str: e.target.value,
                value: parsed.value,
                validJSON: parsed.validJSON,
            });
        }
        else {
            setLocalValue({
                str: e.target.value,
                validJSON: parsed.validJSON,
                error: parsed.error,
            });
        }
        if (parsed.validJSON) {
            setValue(parsed.value);
        }
    }, [setValue]);
    const hasChanged = (0, react_1.useMemo)(() => {
        return value && JSON.stringify(value) !== JSON.stringify(valBeforeSafe);
    }, [valBeforeSafe, value]);
    // TODO: Indicate saving progress
    return ((0, jsx_runtime_1.jsxs)("div", { style: scrollable, children: [(0, jsx_runtime_1.jsx)(RemTextarea_1.RemTextarea, { onChange: onChange, value: localValue.str, status: localValue.validJSON ? 'ok' : 'error', style: style }), (0, jsx_runtime_1.jsx)(layout_1.Spacing, { y: 1 }), localValue.validJSON === false ? ((0, jsx_runtime_1.jsx)(ValidationMessage_1.ValidationMessage, { align: "flex-start", message: localValue.error, type: "error" })) : zodValidationResult.success === false ? ((0, jsx_runtime_1.jsx)("button", { type: "button", style: schemaButton, onClick: switchToSchema, children: (0, jsx_runtime_1.jsx)(ValidationMessage_1.ValidationMessage, { align: "flex-start", message: "Does not match schema", type: "warning" }) })) : null, (0, jsx_runtime_1.jsx)(layout_1.Spacing, { y: 1 }), (0, jsx_runtime_1.jsxs)(layout_1.Row, { children: [(0, jsx_runtime_1.jsx)(Button_1.Button, { disabled: !localValue.validJSON, onClick: onPretty, children: "Format JSON" }), (0, jsx_runtime_1.jsx)(layout_1.Spacing, { x: 1 }), (0, jsx_runtime_1.jsx)(Button_1.Button, { onClick: onSave, disabled: !zodValidationResult.success || !hasChanged, children: "Save" })] })] }));
};
exports.RenderModalJSONInputPropsEditor = RenderModalJSONInputPropsEditor;
