"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZodEffectEditor = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const remotion_1 = require("remotion");
const colors_1 = require("../../../helpers/colors");
const ValidationMessage_1 = require("../../NewComposition/ValidationMessage");
const ZodSwitch_1 = require("./ZodSwitch");
const fullWidth = {
    width: '100%',
};
const ZodEffectEditor = ({ schema, jsonPath, value, setValue: updateValue, compact, defaultValue, onSave, onRemove, showSaveButton, }) => {
    const [localValue, setLocalValue] = (0, react_1.useState)(() => {
        return {
            value,
            zodValidation: schema.safeParse(value),
        };
    });
    const def = schema._def;
    const typeName = def.typeName;
    if (typeName !== remotion_1.z.ZodFirstPartyTypeKind.ZodEffects) {
        throw new Error('expected effect');
    }
    const onChange = (0, react_1.useCallback)((newValue) => {
        setLocalValue(() => {
            const safeParse = schema.safeParse(newValue);
            if (safeParse.success) {
                updateValue(() => newValue);
            }
            return {
                value: newValue,
                zodValidation: safeParse,
            };
        });
    }, [schema, updateValue]);
    const container = (0, react_1.useMemo)(() => {
        if (!localValue.zodValidation.success) {
            return {
                border: `1px solid ${colors_1.FAIL_COLOR}`,
                borderRadius: 4,
            };
        }
        return {
            border: 'none',
            padding: 0,
        };
    }, [localValue.zodValidation.success]);
    return ((0, jsx_runtime_1.jsxs)("fieldset", { style: container, children: [(0, jsx_runtime_1.jsx)("div", { style: fullWidth, children: (0, jsx_runtime_1.jsx)(ZodSwitch_1.ZodSwitch, { value: value, setValue: onChange, jsonPath: jsonPath, schema: def.schema, compact: compact, defaultValue: defaultValue, onSave: onSave, showSaveButton: showSaveButton, onRemove: onRemove }) }), !localValue.zodValidation.success && ((0, jsx_runtime_1.jsx)("legend", { children: (0, jsx_runtime_1.jsx)(ValidationMessage_1.ValidationMessage, { align: "flex-end", message: localValue.zodValidation.error.format()._errors[0], type: "error" }) }))] }));
};
exports.ZodEffectEditor = ZodEffectEditor;
