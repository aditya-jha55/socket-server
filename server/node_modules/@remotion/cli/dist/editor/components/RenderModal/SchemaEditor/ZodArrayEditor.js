"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZodArrayEditor = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const remotion_1 = require("remotion");
const colors_1 = require("../../../helpers/colors");
const layout_1 = require("../../layout");
const ValidationMessage_1 = require("../../NewComposition/ValidationMessage");
const layout_2 = require("../layout");
const SchemaLabel_1 = require("./SchemaLabel");
const ZodArrayItemEditor_1 = require("./ZodArrayItemEditor");
const container = {
    width: '100%',
};
const fullWidth = {
    width: '100%',
};
// TODO: Ability to add another item
// TODO: Ability to revert a chagne (e.g entry deletion )
const ZodArrayEditor = ({ schema, jsonPath, compact, setValue: updateValue, defaultValue, value, onSave, showSaveButton, onRemove, }) => {
    const [localValue, setLocalValue] = (0, react_1.useState)(() => {
        return {
            value,
            zodValidation: schema.safeParse(value),
            revision: 0,
        };
    });
    const def = schema._def;
    const typeName = def.typeName;
    if (typeName !== remotion_1.z.ZodFirstPartyTypeKind.ZodArray) {
        throw new Error('expected object');
    }
    const isRoot = jsonPath.length === 0;
    const Element = isRoot ? 'div' : 'fieldset';
    const { paddingTop } = layout_2.optionRow;
    const fieldset = (0, react_1.useMemo)(() => {
        return {
            borderRadius: 4,
            borderColor: localValue.zodValidation.success
                ? colors_1.INPUT_BORDER_COLOR_UNHOVERED
                : colors_1.FAIL_COLOR,
        };
    }, [localValue.zodValidation.success]);
    const onChange = (0, react_1.useCallback)((updater, incrementRevision) => {
        setLocalValue((oldLocalState) => {
            const newValue = updater(oldLocalState.value);
            const safeParse = schema.safeParse(newValue);
            if (safeParse.success) {
                updateValue(updater);
            }
            return {
                revision: oldLocalState.revision + (incrementRevision ? 1 : 0),
                value: newValue,
                zodValidation: safeParse,
            };
        });
    }, [schema, updateValue]);
    const style = (0, react_1.useMemo)(() => {
        if (isRoot) {
            return undefined;
        }
        return { paddingTop };
    }, [isRoot, paddingTop]);
    return ((0, jsx_runtime_1.jsx)("div", { style: style, children: (0, jsx_runtime_1.jsx)("div", { style: fullWidth, children: (0, jsx_runtime_1.jsxs)(Element, { style: fieldset, children: [isRoot ? null : ((0, jsx_runtime_1.jsx)(SchemaLabel_1.SchemaFieldsetLabel, { jsonPath: jsonPath, onRemove: onRemove })), (0, jsx_runtime_1.jsx)("div", { style: isRoot ? undefined : container, children: localValue.value.map((child, i) => {
                            return ((0, jsx_runtime_1.jsx)(ZodArrayItemEditor_1.ZodArrayItemEditor
                            // eslint-disable-next-line react/no-array-index-key
                            , { onChange: onChange, value: child, def: def, index: i, jsonPath: jsonPath, compact: compact, defaultValue: defaultValue[i], onSave: onSave, showSaveButton: showSaveButton }, `${i}${localValue.revision}`));
                        }) }), !localValue.zodValidation.success && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(layout_1.Spacing, { x: 1 }), (0, jsx_runtime_1.jsx)(ValidationMessage_1.ValidationMessage, { align: "flex-end", message: localValue.zodValidation.error.format()._errors[0], type: "error" })] }))] }) }) }));
};
exports.ZodArrayEditor = ZodArrayEditor;
