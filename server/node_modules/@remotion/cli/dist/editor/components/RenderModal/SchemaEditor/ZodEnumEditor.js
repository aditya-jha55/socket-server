"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZodEnumEditor = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const remotion_1 = require("remotion");
const Checkmark_1 = require("../../../icons/Checkmark");
const layout_1 = require("../../layout");
const ComboBox_1 = require("../../NewComposition/ComboBox");
const ValidationMessage_1 = require("../../NewComposition/ValidationMessage");
const layout_2 = require("../layout");
const SchemaLabel_1 = require("./SchemaLabel");
const container = {
    width: '100%',
};
// TODO: Long values break the layout
const ZodEnumEditor = ({ schema, jsonPath, compact, setValue: updateValue, defaultValue, value, onSave, showSaveButton, onRemove, }) => {
    const [localValue, setLocalValue] = (0, react_1.useState)(() => {
        return {
            value,
            zodValidation: schema.safeParse(value),
            revision: 0,
        };
    });
    const def = schema._def;
    const typeName = def.typeName;
    if (typeName !== remotion_1.z.ZodFirstPartyTypeKind.ZodEnum) {
        throw new Error('expected enum');
    }
    const isRoot = jsonPath.length === 0;
    const onChange = (0, react_1.useCallback)((updater) => {
        setLocalValue((oldLocalState) => {
            const newValue = updater(oldLocalState.value);
            const safeParse = schema.safeParse(newValue);
            if (safeParse.success) {
                updateValue(updater);
            }
            return {
                value: newValue,
                zodValidation: safeParse,
            };
        });
    }, [schema, updateValue]);
    const reset = (0, react_1.useCallback)(() => {
        onChange(() => defaultValue);
    }, [defaultValue, onChange]);
    const comboBoxValues = (0, react_1.useMemo)(() => {
        return def.values.map((option) => {
            return {
                value: option,
                label: option,
                id: option,
                keyHint: null,
                leftItem: option === value ? (0, jsx_runtime_1.jsx)(Checkmark_1.Checkmark, {}) : null,
                onClick: (id) => {
                    onChange(() => id);
                },
                quickSwitcherLabel: null,
                subMenu: null,
                type: 'item',
            };
        });
    }, [def.values, onChange, value]);
    const save = (0, react_1.useCallback)(() => {
        onSave(() => value);
    }, [onSave, value]);
    return ((0, jsx_runtime_1.jsxs)("div", { style: compact ? layout_2.narrowOption : layout_2.optionRow, children: [(0, jsx_runtime_1.jsx)(SchemaLabel_1.SchemaLabel, { onSave: save, showSaveButton: showSaveButton, isDefaultValue: value === defaultValue, compact: compact, onReset: reset, jsonPath: jsonPath, onRemove: onRemove }), (0, jsx_runtime_1.jsx)("div", { style: isRoot ? undefined : container, children: (0, jsx_runtime_1.jsx)(ComboBox_1.Combobox, { values: comboBoxValues, selectedId: value, title: value }) }), !localValue.zodValidation.success && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(layout_1.Spacing, { x: 1 }), (0, jsx_runtime_1.jsx)(ValidationMessage_1.ValidationMessage, { align: "flex-end", message: localValue.zodValidation.error.format()._errors[0], type: "error" })] }))] }));
};
exports.ZodEnumEditor = ZodEnumEditor;
