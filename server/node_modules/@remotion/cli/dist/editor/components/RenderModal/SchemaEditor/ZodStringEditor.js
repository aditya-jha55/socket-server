"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZodStringEditor = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const layout_1 = require("../../layout");
const RemInput_1 = require("../../NewComposition/RemInput");
const ValidationMessage_1 = require("../../NewComposition/ValidationMessage");
const layout_2 = require("../layout");
const SchemaLabel_1 = require("./SchemaLabel");
const fullWidth = {
    width: '100%',
};
const ZodStringEditor = ({ jsonPath, value, setValue, showSaveButton, defaultValue, schema, compact, onSave, onRemove, }) => {
    const [localValue, setLocalValue] = (0, react_1.useState)(() => {
        return {
            value,
            zodValidation: schema.safeParse(value),
        };
    });
    const onValueChange = (0, react_1.useCallback)((newValue) => {
        const safeParse = schema.safeParse(newValue);
        const newLocalState = {
            value: newValue,
            zodValidation: safeParse,
        };
        setLocalValue(newLocalState);
        if (safeParse.success) {
            setValue(newValue);
        }
    }, [schema, setValue]);
    const onChange = (0, react_1.useCallback)((e) => {
        onValueChange(e.target.value);
    }, [onValueChange]);
    const reset = (0, react_1.useCallback)(() => {
        onValueChange(defaultValue);
    }, [defaultValue, onValueChange]);
    const save = (0, react_1.useCallback)(() => {
        onSave(() => value);
    }, [onSave, value]);
    return ((0, jsx_runtime_1.jsxs)("div", { style: compact ? layout_2.narrowOption : layout_2.optionRow, children: [(0, jsx_runtime_1.jsx)(SchemaLabel_1.SchemaLabel, { compact: compact, isDefaultValue: value === defaultValue, jsonPath: jsonPath, onReset: reset, onSave: save, showSaveButton: showSaveButton, onRemove: onRemove }), (0, jsx_runtime_1.jsxs)("div", { style: fullWidth, children: [(0, jsx_runtime_1.jsx)(RemInput_1.RemotionInput, { value: localValue.value, status: localValue.zodValidation.success ? 'ok' : 'error', placeholder: jsonPath.join('.'), onChange: onChange }), !localValue.zodValidation.success && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(layout_1.Spacing, { y: 1, block: true }), (0, jsx_runtime_1.jsx)(ValidationMessage_1.ValidationMessage, { align: "flex-end", message: localValue.zodValidation.error.format()._errors[0], type: "error" })] }))] })] }));
};
exports.ZodStringEditor = ZodStringEditor;
