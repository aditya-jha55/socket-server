"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrameRangeSetting = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const InputDragger_1 = require("../NewComposition/InputDragger");
const RemInput_1 = require("../NewComposition/RemInput");
const layout_1 = require("./layout");
const FrameRangeSetting = ({ startFrame, endFrame, setEndFrame, durationInFrames, setStartFrame }) => {
    const maxStartFrame = endFrame - 1;
    const minStartFrame = 0;
    const minEndFrame = startFrame + 1;
    const maxEndFrame = durationInFrames - 1;
    const onStartFrameChangedDirectly = (0, react_1.useCallback)((newStartFrame) => {
        setStartFrame(newStartFrame);
    }, [setStartFrame]);
    const onEndFrameChangedDirectly = (0, react_1.useCallback)((newEndFrame) => {
        setEndFrame(newEndFrame);
    }, [setEndFrame]);
    const onStartFrameChanged = (0, react_1.useCallback)((e) => {
        setStartFrame((q) => {
            const newStartFrame = parseInt(e, 10);
            if (Number.isNaN(newStartFrame)) {
                return q;
            }
            const newStartFrameClamped = Math.min(maxStartFrame, Math.max(newStartFrame, minStartFrame));
            return newStartFrameClamped;
        });
    }, [maxStartFrame, setStartFrame]);
    const onEndFrameChanged = (0, react_1.useCallback)((e) => {
        setEndFrame((q) => {
            const newEndFrame = parseInt(e, 10);
            if (Number.isNaN(newEndFrame)) {
                return q;
            }
            const newEndFrameClamped = Math.min(maxEndFrame, Math.max(newEndFrame, minEndFrame));
            return newEndFrameClamped;
        });
    }, [maxEndFrame, minEndFrame, setEndFrame]);
    return ((0, jsx_runtime_1.jsxs)("div", { style: layout_1.optionRow, children: [(0, jsx_runtime_1.jsx)("div", { style: layout_1.label, children: "Frame range" }), (0, jsx_runtime_1.jsxs)("div", { style: layout_1.rightRow, children: [(0, jsx_runtime_1.jsx)(RemInput_1.RightAlignInput, { children: (0, jsx_runtime_1.jsx)(InputDragger_1.InputDragger, { value: startFrame, onTextChange: onStartFrameChanged, placeholder: `${minStartFrame}-${maxStartFrame}`, onValueChange: onStartFrameChangedDirectly, name: "startFrame", step: 1, min: minStartFrame, max: maxStartFrame, status: "ok" }) }), (0, jsx_runtime_1.jsx)(RemInput_1.RightAlignInput, { children: (0, jsx_runtime_1.jsx)(InputDragger_1.InputDragger, { value: endFrame, onTextChange: onEndFrameChanged, placeholder: `${minEndFrame}-${maxEndFrame}`, onValueChange: onEndFrameChangedDirectly, name: "endFrame", step: 1, min: minEndFrame, max: maxEndFrame, status: "ok" }) })] })] }));
};
exports.FrameRangeSetting = FrameRangeSetting;
