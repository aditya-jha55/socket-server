"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZodObjectEditor = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const remotion_1 = require("remotion");
const colors_1 = require("../../../helpers/colors");
const layout_1 = require("../layout");
const SchemaLabel_1 = require("./SchemaLabel");
const ZodSwitch_1 = require("./ZodSwitch");
const container = {
    width: '100%',
};
const fullWidth = {
    width: '100%',
};
const fieldset = {
    borderRadius: 4,
    borderColor: colors_1.INPUT_BORDER_COLOR_UNHOVERED,
};
// TODO: First validate locally
const ZodObjectEditor = ({ schema, jsonPath, setValue, value, compact, defaultValue, onSave, showSaveButton, onRemove, }) => {
    const def = schema._def;
    const typeName = def.typeName;
    if (typeName !== remotion_1.z.ZodFirstPartyTypeKind.ZodObject) {
        throw new Error('expected object');
    }
    const shape = def.shape();
    const keys = Object.keys(shape);
    const isRoot = jsonPath.length === 0;
    const Element = isRoot ? 'div' : 'fieldset';
    const { paddingTop } = layout_1.optionRow;
    const style = (0, react_1.useMemo)(() => {
        if (isRoot) {
            return {};
        }
        return { paddingTop };
    }, [isRoot, paddingTop]);
    return ((0, jsx_runtime_1.jsx)("div", { style: style, children: (0, jsx_runtime_1.jsx)("div", { style: fullWidth, children: (0, jsx_runtime_1.jsxs)(Element, { style: fieldset, children: [isRoot ? null : ((0, jsx_runtime_1.jsx)(SchemaLabel_1.SchemaFieldsetLabel, { jsonPath: jsonPath, onRemove: onRemove })), (0, jsx_runtime_1.jsx)("div", { style: isRoot ? undefined : container, children: keys.map((key) => {
                            return ((0, jsx_runtime_1.jsx)(ZodSwitch_1.ZodSwitch, { jsonPath: [...jsonPath, key], schema: shape[key], value: value[key], defaultValue: defaultValue[key], setValue: (val) => {
                                    setValue((oldVal) => {
                                        return {
                                            ...oldVal,
                                            [key]: typeof val === 'function' ? val(oldVal[key]) : val,
                                        };
                                    });
                                }, onSave: (val) => {
                                    onSave((oldVal) => {
                                        return {
                                            ...oldVal,
                                            [key]: typeof val === 'function' ? val(oldVal[key]) : val,
                                        };
                                    });
                                }, onRemove: null, compact: compact, showSaveButton: showSaveButton }, key));
                        }) })] }) }) }));
};
exports.ZodObjectEditor = ZodObjectEditor;
