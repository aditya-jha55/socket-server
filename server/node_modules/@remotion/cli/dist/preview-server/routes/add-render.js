"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleAddRender = void 0;
const renderer_1 = require("@remotion/renderer");
const queue_1 = require("../render-queue/queue");
const handleAddRender = ({ input, entryPoint, remotionRoot, }) => {
    const id = String(Math.random()).replace('0.', '');
    if (input.type === 'video') {
        (0, queue_1.addJob)({
            entryPoint,
            remotionRoot,
            job: {
                cleanup: [],
                codec: input.codec,
                audioCodec: input.audioCodec,
                compositionId: input.compositionId,
                deletedOutputLocation: false,
                type: 'video',
                status: 'idle',
                id,
                imageFormat: input.imageFormat,
                outName: input.outName,
                quality: input.quality,
                scale: input.scale,
                startedAt: Date.now(),
                verbose: input.verbose,
                cancelToken: (0, renderer_1.makeCancelSignal)(),
                concurrency: input.concurrency,
                crf: input.crf,
                endFrame: input.endFrame,
                startFrame: input.startFrame,
                muted: input.muted,
                enforceAudioTrack: input.enforceAudioTrack,
                proResProfile: input.proResProfile,
                pixelFormat: input.pixelFormat,
                audioBitrate: input.audioBitrate,
                videoBitrate: input.videoBitrate,
                everyNthFrame: input.everyNthFrame,
                numberOfGifLoops: input.numberOfGifLoops,
                delayRenderTimeout: input.delayRenderTimeout,
                disallowParallelEncoding: input.disallowParallelEncoding,
                chromiumOptions: input.chromiumOptions,
                envVariables: input.envVariables,
                inputProps: input.inputProps,
            },
        });
    }
    if (input.type === 'still') {
        (0, queue_1.addJob)({
            job: {
                compositionId: input.compositionId,
                id: String(Math.random()).replace('0.', ''),
                startedAt: Date.now(),
                type: 'still',
                outName: input.outName,
                status: 'idle',
                imageFormat: input.imageFormat,
                quality: input.quality,
                frame: input.frame,
                scale: input.scale,
                cleanup: [],
                deletedOutputLocation: false,
                verbose: input.verbose,
                cancelToken: (0, renderer_1.makeCancelSignal)(),
                chromiumOptions: input.chromiumOptions,
                delayRenderTimeout: input.delayRenderTimeout,
                envVariables: input.envVariables,
                inputProps: input.inputProps,
            },
            entryPoint,
            remotionRoot,
        });
    }
    return Promise.resolve(undefined);
};
exports.handleAddRender = handleAddRender;
