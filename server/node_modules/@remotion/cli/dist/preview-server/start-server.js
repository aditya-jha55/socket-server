"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startServer = void 0;
const bundler_1 = require("@remotion/bundler");
const renderer_1 = require("@remotion/renderer");
const http_1 = __importDefault(require("http"));
const config_1 = require("../config");
const log_1 = require("../log");
const dev_middleware_1 = require("./dev-middleware");
const hot_middleware_1 = require("./hot-middleware");
const live_events_1 = require("./live-events");
const routes_1 = require("./routes");
const startServer = async (options) => {
    var _a, _b, _c, _d;
    const [, config] = bundler_1.BundlerInternals.webpackConfig({
        entry: options.entry,
        userDefinedComponent: options.userDefinedComponent,
        outDir: null,
        environment: 'development',
        webpackOverride: (_a = options === null || options === void 0 ? void 0 : options.webpackOverride) !== null && _a !== void 0 ? _a : config_1.ConfigInternals.getWebpackOverrideFn(),
        envVariables: (_b = options === null || options === void 0 ? void 0 : options.getEnvVariables()) !== null && _b !== void 0 ? _b : {},
        maxTimelineTracks: (_c = options === null || options === void 0 ? void 0 : options.maxTimelineTracks) !== null && _c !== void 0 ? _c : 15,
        entryPoints: [
            require.resolve('./hot-middleware/client'),
            require.resolve('./error-overlay/entry-basic.js'),
        ],
        remotionRoot: options.remotionRoot,
        keyboardShortcutsEnabled: options.keyboardShortcutsEnabled,
        poll: options.poll,
    });
    const compiler = (0, bundler_1.webpack)(config);
    const wdmMiddleware = (0, dev_middleware_1.wdm)(compiler);
    const whm = (0, hot_middleware_1.webpackHotMiddleware)(compiler);
    const liveEventsServer = (0, live_events_1.makeLiveEventsRouter)();
    const server = http_1.default.createServer((request, response) => {
        new Promise((resolve) => {
            wdmMiddleware(request, response, () => {
                resolve();
            });
        })
            .then(() => {
            return new Promise((resolve) => {
                whm(request, response, () => {
                    resolve();
                });
            });
        })
            .then(() => {
            return (0, routes_1.handleRoutes)({
                hash: options.hash,
                hashPrefix: options.hashPrefix,
                request,
                response,
                liveEventsServer,
                getCurrentInputProps: options.getCurrentInputProps,
                getEnvVariables: options.getEnvVariables,
                remotionRoot: options.remotionRoot,
                publicDir: options.publicDir,
            });
        })
            .catch((err) => {
            log_1.Log.error(`Error while calling ${request.url}`, err);
            if (!response.headersSent) {
                response.setHeader('content-type', 'application/json');
                response.writeHead(500);
            }
            if (!response.writableEnded) {
                response.end(JSON.stringify({
                    err: err.message,
                }));
            }
        });
    });
    const desiredPort = (_d = options === null || options === void 0 ? void 0 : options.port) !== null && _d !== void 0 ? _d : undefined;
    const maxTries = 5;
    for (let i = 0; i < maxTries; i++) {
        try {
            const selectedPort = await new Promise((resolve, reject) => {
                renderer_1.RenderInternals.getDesiredPort(desiredPort, 3000, 3100)
                    .then(({ port, didUsePort }) => {
                    server.listen(port);
                    server.on('listening', () => {
                        resolve(port);
                        return didUsePort();
                    });
                    server.on('error', (err) => {
                        reject(err);
                    });
                })
                    .catch((err) => reject(err));
            });
            return { port: selectedPort, liveEventsServer };
        }
        catch (err) {
            if (!(err instanceof Error)) {
                throw err;
            }
            const codedError = err;
            if (codedError.code === 'EADDRINUSE') {
                log_1.Log.error(`Port ${codedError.port} is already in use. Trying another port...`);
            }
            else {
                throw err;
            }
        }
    }
    throw new Error(`Tried ${maxTries} times to find a free port. Giving up.`);
};
exports.startServer = startServer;
