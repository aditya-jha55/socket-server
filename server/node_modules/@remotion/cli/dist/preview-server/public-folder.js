"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFiles = exports.watchPublicFolder = exports.fetchFolder = exports.initPublicFolderWatch = void 0;
const bundler_1 = require("@remotion/bundler");
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const env_supports_fs_recursive_1 = require("./env-supports-fs-recursive");
let files = [];
const initPublicFolderWatch = ({ publicDir, onUpdate, staticHash, }) => {
    (0, exports.fetchFolder)({ publicDir, staticHash });
    (0, exports.watchPublicFolder)({ publicDir, onUpdate, staticHash });
};
exports.initPublicFolderWatch = initPublicFolderWatch;
const fetchFolder = ({ publicDir, staticHash, }) => {
    files = bundler_1.BundlerInternals.readRecursively({
        folder: '.',
        startPath: publicDir,
        staticHash,
        limit: 1000,
    }).map((f) => {
        return {
            ...f,
            name: f.name.split(path_1.default.sep).join('/'),
        };
    });
};
exports.fetchFolder = fetchFolder;
const watchPublicFolder = ({ publicDir, onUpdate, staticHash, }) => {
    if (!(0, fs_1.existsSync)(publicDir)) {
        const parentDir = path_1.default.dirname(publicDir);
        const onDirChange = () => {
            if ((0, fs_1.existsSync)(publicDir)) {
                (0, exports.watchPublicFolder)({
                    publicDir,
                    onUpdate,
                    staticHash,
                });
                watcher.close();
            }
        };
        const watcher = (0, fs_1.watch)(parentDir, {}, onDirChange);
        return;
    }
    (0, fs_1.watch)(publicDir, { recursive: (0, env_supports_fs_recursive_1.envSupportsFsRecursive)() }, () => {
        (0, exports.fetchFolder)({ publicDir, staticHash });
        onUpdate();
    });
};
exports.watchPublicFolder = watchPublicFolder;
const getFiles = () => {
    return files;
};
exports.getFiles = getFiles;
