"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processVideoJob = void 0;
const convert_entry_point_to_serve_url_1 = require("../../convert-entry-point-to-serve-url");
const get_cli_options_1 = require("../../get-cli-options");
const render_1 = require("../../render-flows/render");
const processVideoJob = async ({ job, remotionRoot, entryPoint, onProgress, addCleanupCallback, }) => {
    var _a, _b;
    if (job.type !== 'video') {
        throw new Error('Expected video job');
    }
    const { publicDir, browserExecutable, port, browser, ffmpegOverride } = await (0, get_cli_options_1.getCliOptions)({
        isLambda: false,
        type: 'still',
        remotionRoot,
    });
    const fullEntryPoint = (0, convert_entry_point_to_serve_url_1.convertEntryPointToServeUrl)(entryPoint);
    await (0, render_1.renderVideoFlow)({
        remotionRoot,
        browser,
        browserExecutable,
        chromiumOptions: job.chromiumOptions,
        entryPointReason: 'same as preview',
        envVariables: job.envVariables,
        height: null,
        fullEntryPoint,
        inputProps: job.inputProps,
        overwrite: true,
        port,
        publicDir,
        puppeteerTimeout: job.delayRenderTimeout,
        quality: (_a = job.quality) !== null && _a !== void 0 ? _a : undefined,
        remainingArgs: [],
        scale: job.scale,
        width: null,
        compositionIdFromUi: job.compositionId,
        logLevel: job.verbose ? 'verbose' : 'info',
        onProgress,
        indent: true,
        concurrency: job.concurrency,
        everyNthFrame: job.everyNthFrame,
        frameRange: [job.startFrame, job.endFrame],
        quiet: false,
        shouldOutputImageSequence: false,
        addCleanupCallback,
        outputLocationFromUI: job.outName,
        uiCodec: job.codec,
        uiImageFormat: job.imageFormat,
        cancelSignal: job.cancelToken.cancelSignal,
        crf: job.crf,
        ffmpegOverride,
        audioBitrate: job.audioBitrate,
        muted: job.muted,
        enforceAudioTrack: job.enforceAudioTrack,
        proResProfile: (_b = job.proResProfile) !== null && _b !== void 0 ? _b : undefined,
        pixelFormat: job.pixelFormat,
        videoBitrate: job.videoBitrate,
        numberOfGifLoops: job.numberOfGifLoops,
        audioCodec: job.audioCodec,
        disallowParallelEncoding: job.disallowParallelEncoding,
    });
};
exports.processVideoJob = processVideoJob;
