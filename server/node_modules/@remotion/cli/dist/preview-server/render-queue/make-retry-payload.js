"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeRetryPayload = void 0;
const get_default_video_contexts_1 = require("./get-default-video-contexts");
const makeRetryPayload = (job) => {
    var _a, _b, _c;
    const defaults = window.remotion_renderDefaults;
    if (!defaults) {
        throw new Error('defaults not set');
    }
    if (job.type === 'still') {
        const { initialAudioCodec, initialRenderType, initialVideoCodec } = (0, get_default_video_contexts_1.getDefaultCodecs)({
            defaultCodec: defaults.codec,
            isStill: true,
        });
        return {
            type: 'render',
            compositionId: job.compositionId,
            initialFrame: job.frame,
            initialStillImageFormat: job.imageFormat,
            initialVideoImageFormat: defaults.videoImageFormat,
            initialQuality: (_a = job.quality) !== null && _a !== void 0 ? _a : defaults.quality,
            initialOutName: job.outName,
            initialScale: job.scale,
            initialVerbose: job.verbose,
            initialVideoCodecForAudioTab: initialAudioCodec,
            initialRenderType,
            initialVideoCodecForVideoTab: initialVideoCodec,
            initialConcurrency: defaults.concurrency,
            maxConcurrency: defaults.maxConcurrency,
            minConcurrency: defaults.minConcurrency,
            initialMuted: defaults.muted,
            initialEnforceAudioTrack: defaults.enforceAudioTrack,
            initialProResProfile: defaults.proResProfile,
            initialPixelFormat: defaults.pixelFormat,
            initialAudioBitrate: defaults.audioBitrate,
            initialVideoBitrate: defaults.videoBitrate,
            initialEveryNthFrame: defaults.everyNthFrame,
            initialNumberOfGifLoops: defaults.numberOfGifLoops,
            initialDelayRenderTimeout: job.delayRenderTimeout,
            initialAudioCodec: defaults.audioCodec,
            initialEnvVariables: job.envVariables,
            initialDisableWebSecurity: job.chromiumOptions.disableWebSecurity,
            initialOpenGlRenderer: job.chromiumOptions.gl,
            initialHeadless: job.chromiumOptions.headless,
            initialIgnoreCertificateErrors: job.chromiumOptions.ignoreCertificateErrors,
        };
    }
    if (job.type === 'video') {
        const { initialAudioCodec, initialRenderType, initialVideoCodec } = (0, get_default_video_contexts_1.getDefaultCodecs)({
            defaultCodec: defaults.codec,
            isStill: false,
        });
        return {
            type: 'render',
            compositionId: job.compositionId,
            initialStillImageFormat: defaults.stillImageFormat,
            initialVideoImageFormat: job.imageFormat,
            initialQuality: (_b = job.quality) !== null && _b !== void 0 ? _b : defaults.quality,
            initialOutName: job.outName,
            initialScale: job.scale,
            initialVerbose: job.verbose,
            initialFrame: 0,
            initialConcurrency: job.concurrency,
            maxConcurrency: defaults.maxConcurrency,
            minConcurrency: defaults.minConcurrency,
            initialMuted: job.muted,
            initialVideoCodecForAudioTab: initialAudioCodec,
            initialEnforceAudioTrack: job.enforceAudioTrack,
            initialRenderType,
            initialVideoCodecForVideoTab: initialVideoCodec,
            initialProResProfile: (_c = job.proResProfile) !== null && _c !== void 0 ? _c : defaults.proResProfile,
            initialPixelFormat: job.pixelFormat,
            initialAudioBitrate: job.audioBitrate,
            initialVideoBitrate: job.videoBitrate,
            initialEveryNthFrame: job.everyNthFrame,
            initialNumberOfGifLoops: job.numberOfGifLoops,
            initialDelayRenderTimeout: job.delayRenderTimeout,
            initialAudioCodec: job.audioCodec,
            initialEnvVariables: job.envVariables,
            initialDisableWebSecurity: job.chromiumOptions.disableWebSecurity,
            initialOpenGlRenderer: job.chromiumOptions.gl,
            initialHeadless: job.chromiumOptions.headless,
            initialIgnoreCertificateErrors: job.chromiumOptions.ignoreCertificateErrors,
        };
    }
    throw new Error(`Job ${JSON.stringify(job)} Not implemented`);
};
exports.makeRetryPayload = makeRetryPayload;
