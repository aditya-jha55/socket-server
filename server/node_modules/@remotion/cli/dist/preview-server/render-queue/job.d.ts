import type { AudioCodec, Codec, makeCancelSignal, PixelFormat, ProResProfile, StillImageFormat, VideoImageFormat } from '@remotion/renderer';
import type { AggregateRenderProgress } from '../../progress-types';
import type { RequiredChromiumOptions } from '../../required-chromium-options';
export declare type BaseRenderProgress = {
    message: string;
    value: number;
};
declare type RenderJobDynamicStatus = {
    status: 'done';
    progress: BaseRenderProgress & AggregateRenderProgress;
} | {
    status: 'running';
    progress: BaseRenderProgress & AggregateRenderProgress;
} | {
    status: 'idle';
} | {
    status: 'failed';
    error: {
        message: string;
        stack: string | undefined;
    };
};
export declare type JobProgressCallback = (options: BaseRenderProgress & AggregateRenderProgress) => void;
declare type RenderJobDynamicFields = ({
    type: 'still';
    imageFormat: StillImageFormat;
    quality: number | null;
    frame: number;
    scale: number;
} & RenderJobDynamicStatus) | ({
    type: 'video';
    imageFormat: VideoImageFormat;
    quality: number | null;
    scale: number;
    codec: Codec;
    audioCodec: AudioCodec;
    concurrency: number;
    crf: number | null;
    startFrame: number;
    endFrame: number;
    muted: boolean;
    enforceAudioTrack: boolean;
    proResProfile: ProResProfile | null;
    pixelFormat: PixelFormat;
    audioBitrate: string | null;
    videoBitrate: string | null;
    everyNthFrame: number;
    numberOfGifLoops: number | null;
    disallowParallelEncoding: boolean;
} & RenderJobDynamicStatus);
export declare type RenderJob = {
    startedAt: number;
    compositionId: string;
    id: string;
    outName: string;
    deletedOutputLocation: boolean;
    verbose: boolean;
    delayRenderTimeout: number;
    cancelToken: ReturnType<typeof makeCancelSignal>;
    chromiumOptions: RequiredChromiumOptions;
    envVariables: Record<string, string>;
    inputProps: unknown;
} & RenderJobDynamicFields;
export declare type RenderJobWithCleanup = RenderJob & {
    cleanup: (() => void)[];
};
declare type AddRenderRequestDynamicFields = {
    type: 'still';
    imageFormat: StillImageFormat;
    quality: number | null;
    frame: number;
    scale: number;
    verbose: boolean;
} | {
    type: 'video';
    codec: Codec;
    audioCodec: AudioCodec;
    imageFormat: VideoImageFormat;
    quality: number | null;
    scale: number;
    verbose: boolean;
    concurrency: number;
    crf: number | null;
    startFrame: number;
    endFrame: number;
    muted: boolean;
    enforceAudioTrack: boolean;
    proResProfile: ProResProfile | null;
    pixelFormat: PixelFormat;
    audioBitrate: string | null;
    videoBitrate: string | null;
    everyNthFrame: number;
    numberOfGifLoops: number | null;
    disallowParallelEncoding: boolean;
};
export declare type CancelRenderRequest = {
    jobId: string;
};
export declare type CancelRenderResponse = {};
export declare type AddRenderRequest = {
    compositionId: string;
    outName: string;
    chromiumOptions: RequiredChromiumOptions;
    delayRenderTimeout: number;
    envVariables: Record<string, string>;
    inputProps: unknown;
} & AddRenderRequestDynamicFields;
export declare type RemoveRenderRequest = {
    jobId: string;
};
export declare type OpenInFileExplorerRequest = {
    directory: string;
};
export declare type SubscribeToFileExistenceRequest = {
    file: string;
    clientId: string;
};
export declare type SubscribeToFileExistenceResponse = {
    exists: boolean;
};
export declare type UnsubscribeFromFileExistenceRequest = {
    file: string;
    clientId: string;
};
export declare type UpdateDefaultPropsRequest = {
    compositionId: string;
    defaultProps: string;
};
export {};
