"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.openDirectoryInFinder = void 0;
const child_process_1 = require("child_process");
const os_1 = require("os");
const path_1 = __importDefault(require("path"));
const truthy_1 = require("../../truthy");
const openDirectoryInFinder = (dirToOpen, allowedDirectory) => {
    const resolved = path_1.default.resolve(allowedDirectory, dirToOpen);
    const relativeToProcessCwd = path_1.default.relative(allowedDirectory, resolved);
    if (relativeToProcessCwd.startsWith('..')) {
        throw new Error(`Not allowed to open ${relativeToProcessCwd}`);
    }
    const command = (0, os_1.platform)() === 'darwin'
        ? 'open'
        : (0, os_1.platform)() === 'linux'
            ? 'xdg-open'
            : 'start';
    const p = (0, child_process_1.spawn)(command, [(0, os_1.platform)() === 'darwin' ? '-R' : null, dirToOpen].filter(truthy_1.truthy));
    const stderrChunks = [];
    p.stderr.on('data', (d) => stderrChunks.push(d));
    return new Promise((resolve, reject) => {
        p.on('exit', (code) => {
            if (code === 0) {
                resolve();
            }
            else {
                const message = Buffer.concat(stderrChunks).toString('utf-8');
                reject(new Error(message));
            }
        });
        p.on('error', (err) => {
            p.kill();
            if (err) {
                reject(err);
            }
        });
    });
};
exports.openDirectoryInFinder = openDirectoryInFinder;
