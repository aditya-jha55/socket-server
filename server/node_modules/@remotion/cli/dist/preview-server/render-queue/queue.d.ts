import type { JobProgressCallback, RenderJob, RenderJobWithCleanup } from './job';
export declare const getRenderQueue: () => RenderJob[];
export declare const notifyClientsOfJobUpdate: () => void;
export declare const processJob: ({ job, remotionRoot, entryPoint, onProgress, addCleanupCallback, }: {
    job: RenderJob;
    remotionRoot: string;
    entryPoint: string;
    onProgress: JobProgressCallback;
    addCleanupCallback: (cb: () => void) => void;
}) => Promise<void>;
export declare const addJob: ({ job, entryPoint, remotionRoot, }: {
    job: RenderJobWithCleanup;
    entryPoint: string;
    remotionRoot: string;
}) => void;
export declare const removeJob: (jobId: string) => void;
export declare const cancelJob: (jobId: string) => void;
export declare const processJobIfPossible: ({ remotionRoot, entryPoint, }: {
    remotionRoot: string;
    entryPoint: string;
}) => Promise<void>;
