/// <reference types="node" />
import type { IncomingMessage, ServerResponse } from 'http';
import type { AddRenderRequest, CancelRenderRequest, CancelRenderResponse, OpenInFileExplorerRequest, RemoveRenderRequest, SubscribeToFileExistenceRequest, SubscribeToFileExistenceResponse, UnsubscribeFromFileExistenceRequest, UpdateDefaultPropsRequest } from './render-queue/job';
export declare type ApiHandler<ReqData, ResData> = (params: {
    input: ReqData;
    entryPoint: string;
    remotionRoot: string;
    request: IncomingMessage;
    response: ServerResponse;
}) => Promise<ResData>;
export declare type ApiRoute<ReqData, ResData> = {
    handler: ApiHandler<ReqData, ResData>;
    endpoint: string;
};
declare type ReqAndRes<A, B> = {
    Request: A;
    Response: B;
};
export declare type ApiRoutes = {
    '/api/cancel': ReqAndRes<CancelRenderRequest, CancelRenderResponse>;
    '/api/render': ReqAndRes<AddRenderRequest, undefined>;
    '/api/unsubscribe-from-file-existence': ReqAndRes<UnsubscribeFromFileExistenceRequest, undefined>;
    '/api/subscribe-to-file-existence': ReqAndRes<SubscribeToFileExistenceRequest, SubscribeToFileExistenceResponse>;
    '/api/remove-render': ReqAndRes<RemoveRenderRequest, undefined>;
    '/api/open-in-file-explorer': ReqAndRes<OpenInFileExplorerRequest, void>;
    '/api/update-default-props': ReqAndRes<UpdateDefaultPropsRequest, void>;
};
export {};
