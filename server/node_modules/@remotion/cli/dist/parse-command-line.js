"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.quietFlagProvided = exports.parseCommandLine = exports.parsedCli = exports.BooleanFlags = void 0;
const renderer_1 = require("@remotion/renderer");
const minimist_1 = __importDefault(require("minimist"));
const path_1 = require("path");
const config_1 = require("./config");
const log_1 = require("./log");
exports.BooleanFlags = [
    'force',
    'overwrite',
    'sequence',
    'help',
    'quiet',
    'q',
    'muted',
    'enforce-audio-track',
    // Lambda flags
    'force',
    'disable-chunk-optimization',
    'save-browser-logs',
    'disable-cloudwatch',
    'yes',
    'y',
    'disable-web-security',
    'ignore-certificate-errors',
    'disable-headless',
    'disable-keyboard-shortcuts',
    'default-only',
    'no-open',
];
exports.parsedCli = (0, minimist_1.default)(process.argv.slice(2), {
    boolean: exports.BooleanFlags,
});
const parseCommandLine = () => {
    if (exports.parsedCli['pixel-format']) {
        config_1.Config.setPixelFormat(exports.parsedCli['pixel-format']);
    }
    if (exports.parsedCli['image-format']) {
        config_1.Config.setImageFormat(exports.parsedCli['image-format']);
    }
    if (exports.parsedCli['browser-executable']) {
        config_1.Config.setBrowserExecutable(exports.parsedCli['browser-executable']);
    }
    if (exports.parsedCli['ffmpeg-executable']) {
        config_1.Config.setFfmpegExecutable((0, path_1.resolve)(exports.parsedCli['ffmpeg-executable']));
    }
    if (exports.parsedCli['number-of-gif-loops']) {
        config_1.Config.setNumberOfGifLoops(exports.parsedCli['number-of-gif-loops']);
    }
    if (exports.parsedCli['ffprobe-executable']) {
        config_1.Config.setFfprobeExecutable((0, path_1.resolve)(exports.parsedCli['ffprobe-executable']));
    }
    if (typeof exports.parsedCli['bundle-cache'] !== 'undefined') {
        config_1.Config.setCachingEnabled(exports.parsedCli['bundle-cache'] !== 'false');
    }
    if (exports.parsedCli['disable-web-security']) {
        config_1.Config.setChromiumDisableWebSecurity(true);
    }
    if (exports.parsedCli['ignore-certificate-errors']) {
        config_1.Config.setChromiumIgnoreCertificateErrors(true);
    }
    if (exports.parsedCli['disable-headless']) {
        config_1.Config.setChromiumHeadlessMode(false);
    }
    if (exports.parsedCli.log) {
        if (!renderer_1.RenderInternals.isValidLogLevel(exports.parsedCli.log)) {
            log_1.Log.error('Invalid `--log` value passed.');
            log_1.Log.error(`Accepted values: ${renderer_1.RenderInternals.logLevels
                .map((l) => `'${l}'`)
                .join(', ')}.`);
            process.exit(1);
        }
        config_1.ConfigInternals.Logging.setLogLevel(exports.parsedCli.log);
    }
    if (exports.parsedCli.concurrency) {
        config_1.Config.setConcurrency(exports.parsedCli.concurrency);
    }
    if (exports.parsedCli.timeout) {
        config_1.Config.setTimeoutInMilliseconds(exports.parsedCli.timeout);
    }
    if (exports.parsedCli.height) {
        config_1.Config.overrideHeight(exports.parsedCli.height);
    }
    if (exports.parsedCli.width) {
        config_1.Config.overrideWidth(exports.parsedCli.width);
    }
    if (exports.parsedCli.frames) {
        config_1.ConfigInternals.setFrameRangeFromCli(exports.parsedCli.frames);
    }
    if (exports.parsedCli.frame) {
        config_1.ConfigInternals.setStillFrame(Number(exports.parsedCli.frame));
    }
    if (exports.parsedCli.png) {
        log_1.Log.warn('The --png flag has been deprecrated. Use --sequence --image-format=png from now on.');
        config_1.Config.setImageSequence(true);
        config_1.Config.setImageFormat('png');
    }
    if (exports.parsedCli.sequence) {
        config_1.Config.setImageSequence(true);
    }
    if (typeof exports.parsedCli.crf !== 'undefined') {
        config_1.Config.setCrf(exports.parsedCli.crf);
    }
    if (exports.parsedCli['every-nth-frame']) {
        config_1.Config.setEveryNthFrame(exports.parsedCli['every-nth-frame']);
    }
    if (exports.parsedCli.gl) {
        config_1.Config.setChromiumOpenGlRenderer(exports.parsedCli.gl);
    }
    if (exports.parsedCli['prores-profile']) {
        config_1.Config.setProResProfile(String(exports.parsedCli['prores-profile']));
    }
    if (exports.parsedCli.overwrite) {
        config_1.Config.setOverwriteOutput(exports.parsedCli.overwrite);
    }
    if (typeof exports.parsedCli.quality !== 'undefined') {
        config_1.Config.setQuality(exports.parsedCli.quality);
    }
    if (typeof exports.parsedCli.scale !== 'undefined') {
        config_1.Config.setScale(exports.parsedCli.scale);
    }
    if (typeof exports.parsedCli.port !== 'undefined') {
        config_1.Config.setPort(exports.parsedCli.port);
    }
    if (typeof exports.parsedCli.muted !== 'undefined') {
        config_1.Config.setMuted(exports.parsedCli.muted);
    }
    if (typeof exports.parsedCli['disable-keyboard-shortcuts'] !== 'undefined') {
        config_1.Config.setKeyboardShortcutsEnabled(!exports.parsedCli['disable-keyboard-shortcuts']);
    }
    if (typeof exports.parsedCli['enforce-audio-track'] !== 'undefined') {
        config_1.Config.setEnforceAudioTrack(exports.parsedCli['enforce-audio-track']);
    }
    if (typeof exports.parsedCli['public-dir'] !== 'undefined') {
        config_1.Config.setPublicDir(exports.parsedCli['public-dir']);
    }
    if (typeof exports.parsedCli['webpack-poll'] !== 'undefined') {
        config_1.Config.setWebpackPollingInMilliseconds(exports.parsedCli['webpack-poll']);
    }
    if (typeof exports.parsedCli['audio-bitrate'] !== 'undefined') {
        config_1.Config.setAudioBitrate(exports.parsedCli['audio-bitrate']);
    }
    if (typeof exports.parsedCli['video-bitrate'] !== 'undefined') {
        config_1.Config.setVideoBitrate(exports.parsedCli['video-bitrate']);
    }
};
exports.parseCommandLine = parseCommandLine;
const quietFlagProvided = () => exports.parsedCli.quiet || exports.parsedCli.q;
exports.quietFlagProvided = quietFlagProvided;
