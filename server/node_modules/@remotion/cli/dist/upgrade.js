"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.upgrade = void 0;
const renderer_1 = require("@remotion/renderer");
const path_1 = __importDefault(require("path"));
const config_1 = require("./config");
const get_latest_remotion_version_1 = require("./get-latest-remotion-version");
const list_of_remotion_packages_1 = require("./list-of-remotion-packages");
const log_1 = require("./log");
const get_package_manager_1 = require("./preview-server/get-package-manager");
const getUpgradeCommand = ({ manager, packages, version, }) => {
    const pkgList = packages.map((p) => `${p}@${version}`);
    const commands = {
        npm: ['i', '--save-exact', ...pkgList],
        pnpm: ['i', '--save-exact', ...pkgList],
        yarn: ['add', '--exact', ...pkgList],
    };
    return commands[manager];
};
const upgrade = async (remotionRoot, packageManager) => {
    var _a, _b, _c, _d;
    const packageJsonFilePath = path_1.default.join(remotionRoot, 'package.json');
    const packageJson = require(packageJsonFilePath);
    const dependencies = Object.keys(packageJson.dependencies);
    const devDependencies = Object.keys((_a = packageJson.devDependencies) !== null && _a !== void 0 ? _a : {});
    const optionalDependencies = Object.keys((_b = packageJson.optionalDependencies) !== null && _b !== void 0 ? _b : {});
    const peerDependencies = Object.keys((_c = packageJson.peerDependencies) !== null && _c !== void 0 ? _c : {});
    const latestRemotionVersion = await (0, get_latest_remotion_version_1.getLatestRemotionVersion)();
    log_1.Log.info('Newest Remotion version is', latestRemotionVersion);
    const manager = (0, get_package_manager_1.getPackageManager)(remotionRoot, packageManager);
    if (manager === 'unknown') {
        throw new Error(`No lockfile was found in your project (one of ${get_package_manager_1.lockFilePaths
            .map((p) => p.path)
            .join(', ')}). Install dependencies using your favorite manager!`);
    }
    const toUpgrade = list_of_remotion_packages_1.listOfRemotionPackages.filter((u) => dependencies.includes(u) ||
        devDependencies.includes(u) ||
        optionalDependencies.includes(u) ||
        peerDependencies.includes(u));
    const prom = renderer_1.RenderInternals.execa(manager.manager, getUpgradeCommand({
        manager: manager.manager,
        packages: toUpgrade,
        version: latestRemotionVersion,
    }), {
        stdio: 'inherit',
    });
    if (renderer_1.RenderInternals.isEqualOrBelowLogLevel(config_1.ConfigInternals.Logging.getLogLevel(), 'info')) {
        (_d = prom.stdout) === null || _d === void 0 ? void 0 : _d.pipe(process.stdout);
    }
    await prom;
    log_1.Log.info('‚è´ Remotion has been upgraded!');
    log_1.Log.info('https://remotion.dev/changelog');
};
exports.upgrade = upgrade;
