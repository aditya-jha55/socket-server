import type { ComponentType } from 'react';
import React from 'react';
import type { CompProps } from 'remotion';
import type { PlayerRef } from './player-methods.js';
import type { RenderFullscreenButton, RenderPlayPauseButton } from './PlayerControls.js';
import type { RenderLoading, RenderPoster } from './PlayerUI.js';
import type { PropsIfHasProps } from './utils/props-if-has-props.js';
export declare type ErrorFallback = (info: {
    error: Error;
}) => React.ReactNode;
export declare type PlayerProps<T> = {
    durationInFrames: number;
    compositionWidth: number;
    compositionHeight: number;
    fps: number;
    showVolumeControls?: boolean;
    controls?: boolean;
    errorFallback?: ErrorFallback;
    style?: React.CSSProperties;
    loop?: boolean;
    autoPlay?: boolean;
    allowFullscreen?: boolean;
    clickToPlay?: boolean;
    doubleClickToFullscreen?: boolean;
    spaceKeyToPlayOrPause?: boolean;
    numberOfSharedAudioTags?: number;
    playbackRate?: number;
    renderLoading?: RenderLoading;
    moveToBeginningWhenEnded?: boolean;
    className?: string;
    initialFrame?: number;
    renderPoster?: RenderPoster;
    showPosterWhenPaused?: boolean;
    showPosterWhenEnded?: boolean;
    showPosterWhenUnplayed?: boolean;
    inFrame?: number | null;
    outFrame?: number | null;
    initiallyShowControls?: number | boolean;
    renderPlayPauseButton?: RenderPlayPauseButton;
    renderFullscreenButton?: RenderFullscreenButton;
    alwaysShowControls?: boolean;
    initiallyMuted?: boolean;
} & PropsIfHasProps<T> & CompProps<T>;
export declare const componentOrNullIfLazy: <T>(props: CompProps<T>) => ComponentType<T> | null;
/**
 * @description A component which can be rendered in a regular React App (for example: Create React App, Next.js) to display a Remotion video.
 * @see [Documentation](https://www.remotion.dev/docs/player/player)
 */
export declare const Player: <T>(props: PlayerProps<T> & React.RefAttributes<PlayerRef>) => React.ReactElement | null;
