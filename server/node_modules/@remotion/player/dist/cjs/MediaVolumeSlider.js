"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaVolumeSlider = exports.VOLUME_SLIDER_WIDTH = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const remotion_1 = require("remotion");
const icons_js_1 = require("./icons.js");
const use_hover_state_js_1 = require("./use-hover-state.js");
const BAR_HEIGHT = 5;
const KNOB_SIZE = 12;
exports.VOLUME_SLIDER_WIDTH = 100;
const MediaVolumeSlider = ({ displayVerticalVolumeSlider }) => {
    const [mediaMuted, setMediaMuted] = remotion_1.Internals.useMediaMutedState();
    const [mediaVolume, setMediaVolume] = remotion_1.Internals.useMediaVolumeState();
    const [focused, setFocused] = (0, react_1.useState)(false);
    const parentDivRef = (0, react_1.useRef)(null);
    const inputRef = (0, react_1.useRef)(null);
    const hover = (0, use_hover_state_js_1.useHoverState)(parentDivRef);
    // Need to import it from React to fix React 17 ESM support.
    const randomId = 
    // eslint-disable-next-line react-hooks/rules-of-hooks
    typeof react_1.default.useId === 'undefined' ? 'volume-slider' : react_1.default.useId();
    const [randomClass] = (0, react_1.useState)(() => `__remotion-volume-slider-${(0, remotion_1.random)(randomId)}`.replace('.', ''));
    const isMutedOrZero = mediaMuted || mediaVolume === 0;
    const onVolumeChange = (e) => {
        setMediaVolume(parseFloat(e.target.value));
    };
    const onBlur = () => {
        setTimeout(() => {
            // We need a small delay to check which element was focused next,
            // and if it wasn't the volume slider, we hide it
            if (document.activeElement !== inputRef.current) {
                setFocused(false);
            }
        }, 10);
    };
    const onClick = (0, react_1.useCallback)(() => {
        if (mediaVolume === 0) {
            setMediaVolume(1);
            setMediaMuted(false);
            return;
        }
        setMediaMuted((mute) => !mute);
    }, [mediaVolume, setMediaMuted, setMediaVolume]);
    const parentDivStyle = (0, react_1.useMemo)(() => {
        return {
            display: 'inline-flex',
            background: 'none',
            border: 'none',
            padding: 6,
            justifyContent: 'center',
            alignItems: 'center',
            touchAction: 'none',
            ...(displayVerticalVolumeSlider && { position: 'relative' }),
        };
    }, [displayVerticalVolumeSlider]);
    const volumeContainer = (0, react_1.useMemo)(() => {
        return {
            display: 'inline',
            width: icons_js_1.ICON_SIZE,
            height: icons_js_1.ICON_SIZE,
            cursor: 'pointer',
            appearance: 'none',
            background: 'none',
            border: 'none',
            padding: 0,
        };
    }, []);
    const inputStyle = (0, react_1.useMemo)(() => {
        const commonStyle = {
            WebkitAppearance: 'none',
            backgroundColor: 'rgba(255, 255, 255, 0.5)',
            borderRadius: BAR_HEIGHT / 2,
            cursor: 'pointer',
            height: BAR_HEIGHT,
            width: exports.VOLUME_SLIDER_WIDTH,
            backgroundImage: `linear-gradient(
				to right,
				white ${mediaVolume * 100}%, rgba(255, 255, 255, 0) ${mediaVolume * 100}%
			)`,
        };
        if (displayVerticalVolumeSlider) {
            return {
                ...commonStyle,
                transform: `rotate(-90deg)`,
                position: 'absolute',
                bottom: icons_js_1.ICON_SIZE + exports.VOLUME_SLIDER_WIDTH / 2 + 5,
            };
        }
        return {
            ...commonStyle,
            marginLeft: 5,
        };
    }, [displayVerticalVolumeSlider, mediaVolume]);
    const sliderStyle = `
	.${randomClass}::-webkit-slider-thumb {
		-webkit-appearance: none;
		background-color: white;
		border-radius: ${KNOB_SIZE / 2}px;
		box-shadow: 0 0 2px black;
		height: ${KNOB_SIZE}px;
		width: ${KNOB_SIZE}px;
	}

	.${randomClass}::-moz-range-thumb {
		-webkit-appearance: none;
		background-color: white;
		border-radius: ${KNOB_SIZE / 2}px;
		box-shadow: 0 0 2px black;
		height: ${KNOB_SIZE}px;
		width: ${KNOB_SIZE}px;
	}
`;
    return ((0, jsx_runtime_1.jsxs)("div", { ref: parentDivRef, style: parentDivStyle, children: [(0, jsx_runtime_1.jsx)("style", { 
                // eslint-disable-next-line react/no-danger
                dangerouslySetInnerHTML: {
                    __html: sliderStyle,
                } }), (0, jsx_runtime_1.jsx)("button", { "aria-label": isMutedOrZero ? 'Unmute sound' : 'Mute sound', title: isMutedOrZero ? 'Unmute sound' : 'Mute sound', onClick: onClick, onBlur: onBlur, onFocus: () => setFocused(true), style: volumeContainer, type: "button", children: isMutedOrZero ? (0, jsx_runtime_1.jsx)(icons_js_1.VolumeOffIcon, {}) : (0, jsx_runtime_1.jsx)(icons_js_1.VolumeOnIcon, {}) }), (focused || hover) && !mediaMuted ? ((0, jsx_runtime_1.jsx)("input", { ref: inputRef, "aria-label": "Change volume", className: randomClass, max: 1, min: 0, onBlur: () => setFocused(false), onChange: onVolumeChange, step: 0.01, type: "range", value: mediaVolume, style: inputStyle })) : null] }));
};
exports.MediaVolumeSlider = MediaVolumeSlider;
