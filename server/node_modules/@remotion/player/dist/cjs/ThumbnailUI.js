"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const remotion_1 = require("remotion");
const calculate_scale_js_1 = require("./calculate-scale.js");
const error_boundary_js_1 = require("./error-boundary.js");
const player_css_classname_js_1 = require("./player-css-classname.js");
const use_thumbnail_js_1 = require("./use-thumbnail.js");
const is_node_js_1 = require("./utils/is-node.js");
const use_element_size_js_1 = require("./utils/use-element-size.js");
const reactVersion = react_1.default.version.split('.')[0];
if (reactVersion === '0') {
    throw new Error(`Version ${reactVersion} of "react" is not supported by Remotion`);
}
const doesReactVersionSupportSuspense = parseInt(reactVersion, 10) >= 18;
const ThumbnailUI = ({ style, inputProps, errorFallback, renderLoading, className }, ref) => {
    var _a, _b, _c;
    const config = remotion_1.Internals.useUnsafeVideoConfig();
    const video = remotion_1.Internals.useVideo();
    const container = (0, react_1.useRef)(null);
    const canvasSize = (0, use_element_size_js_1.useElementSize)(container, {
        triggerOnWindowResize: false,
        shouldApplyCssTransforms: false,
    });
    const layout = (0, react_1.useMemo)(() => {
        if (!config || !canvasSize) {
            return null;
        }
        return (0, calculate_scale_js_1.calculateCanvasTransformation)({
            canvasSize,
            compositionHeight: config.height,
            compositionWidth: config.width,
            previewSize: 'auto',
        });
    }, [canvasSize, config]);
    const scale = (_a = layout === null || layout === void 0 ? void 0 : layout.scale) !== null && _a !== void 0 ? _a : 1;
    const thumbnail = (0, use_thumbnail_js_1.useThumbnail)();
    (0, react_1.useImperativeHandle)(ref, () => {
        const methods = {
            getContainerNode: () => container.current,
            getScale: () => scale,
        };
        return Object.assign(thumbnail.emitter, methods);
    }, [scale, thumbnail.emitter]);
    const VideoComponent = video ? video.component : null;
    const outerStyle = (0, react_1.useMemo)(() => {
        return (0, calculate_scale_js_1.calculateOuterStyle)({ config, style, canvasSize });
    }, [canvasSize, config, style]);
    const outer = (0, react_1.useMemo)(() => {
        return (0, calculate_scale_js_1.calculateOuter)({ config, layout, scale });
    }, [config, layout, scale]);
    const containerStyle = (0, react_1.useMemo)(() => {
        return (0, calculate_scale_js_1.calculateContainerStyle)({
            canvasSize,
            config,
            layout,
            scale,
        });
    }, [canvasSize, config, layout, scale]);
    const onError = (0, react_1.useCallback)((error) => {
        // Pay attention to `this context`
        thumbnail.emitter.dispatchError(error);
    }, [thumbnail.emitter]);
    const rootRef = (0, react_1.useRef)(null);
    (0, react_1.useImperativeHandle)(ref, () => rootRef.current, []);
    const loadingMarkup = (0, react_1.useMemo)(() => {
        return renderLoading
            ? renderLoading({
                height: outerStyle.height,
                width: outerStyle.width,
            })
            : null;
    }, [outerStyle.height, outerStyle.width, renderLoading]);
    if (!config) {
        return null;
    }
    const content = ((0, jsx_runtime_1.jsx)("div", { style: outer, children: (0, jsx_runtime_1.jsx)("div", { style: containerStyle, className: player_css_classname_js_1.PLAYER_CSS_CLASSNAME, children: VideoComponent ? ((0, jsx_runtime_1.jsx)(error_boundary_js_1.ErrorBoundary, { onError: onError, errorFallback: errorFallback, children: (0, jsx_runtime_1.jsx)(VideoComponent, { ...((_b = video === null || video === void 0 ? void 0 : video.defaultProps) !== null && _b !== void 0 ? _b : {}), ...((_c = inputProps) !== null && _c !== void 0 ? _c : {}) }) })) : null }) }));
    if (is_node_js_1.IS_NODE && !doesReactVersionSupportSuspense) {
        return ((0, jsx_runtime_1.jsx)("div", { ref: container, style: outerStyle, className: className, children: content }));
    }
    return ((0, jsx_runtime_1.jsx)("div", { ref: container, style: outerStyle, className: className, children: (0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: loadingMarkup, children: content }) }));
};
exports.default = (0, react_1.forwardRef)(ThumbnailUI);
